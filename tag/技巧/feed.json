{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"技巧\" tag",
    "description": "欢迎来到Huan的笔记空间~~~~~~🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/05/10/%E5%85%B3%E4%BA%8E%E6%81%A2%E5%A4%8D%E7%AC%A6%E5%8F%B7%E8%A1%A8%E8%BF%99%E4%BB%B6%E4%BA%8B/",
            "url": "http://example.com/2024/05/10/%E5%85%B3%E4%BA%8E%E6%81%A2%E5%A4%8D%E7%AC%A6%E5%8F%B7%E8%A1%A8%E8%BF%99%E4%BB%B6%E4%BA%8B/",
            "title": "关于恢复符号表这件事",
            "date_published": "2024-05-10T08:12:12.000Z",
            "content_html": "<p>目标文件：</p>\n<pre><code class=\"language-file\">typo: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=211877f58b5a0e8774b8a3a72c83890f8cd38e63, stripped\n</code></pre>\n<p>32 位 ARM 架构，静态连接。内核版本 GUN/Linux 2.6.32 | 去符号表</p>\n<blockquote>\n<p>对于修复程序我们首先要准备一个拥有完全符号的程序，使用一些方法给他导出符号表。</p>\n</blockquote>\n<p>因此，我们需要去编译一个与其类似的程序，用 ida 插件 rizzo，去生成其符号表内容</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 文件名: hello_arm.c</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, ARM World!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译内容如下：</p>\n<blockquote>\n<p><code>arm-linux-gnueabihf-gcc -static -march=armv7-a -mfloat-abi=hard -o myapp hello_arm.c</code></p>\n</blockquote>\n<blockquote>\n<p>myapp: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), statically linked, for GNU/Linux 2.6.31, BuildID[sha1]=da2d1220742527123cd7cfeb41bbc4d2facbb3d5, with debug_info, not stripped</p>\n</blockquote>\n<p>接下来我们需要将其用 ida 打开。</p>\n<p><img data-src=\"/img/gccarm/image-20240510152016835.png\" alt=\"image-20240510152016835\"></p>\n<p>点击此处去生成符号表 (.riz)</p>\n<p>接下来就需要再次用 ida 装载我们要恢复符号表的程序。</p>\n<p><img data-src=\"/img/gccarm/image-20240510152245888.png\" alt=\"image-20240510152245888\"></p>\n<p><img data-src=\"/img/gccarm/image-20240510152301219.png\" alt=\"image-20240510152301219\"></p>\n<p>部分函数恢复成功。但是因为两个程序的内核版本不同，或者将 rizzo 识别能力有限的原因。没有恢复的很好，但是确实也是恢复了。</p>\n<blockquote>\n<p>特殊状况：arm 的栈底指针不一定为 R11, 也有可能是其他寄存器。</p>\n<p>​\t\t 因为我自己编出的程序的栈底指针为 R7</p>\n</blockquote>\n",
            "tags": [
                "技巧"
            ]
        }
    ]
}