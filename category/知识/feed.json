{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"知识\" category",
    "description": "欢迎来到Huan的笔记空间~~~~~~🌸",
    "home_page_url": "https://yhuanhuan01.github.io",
    "items": [
        {
            "id": "https://yhuanhuan01.github.io/2023/08/09/bins/",
            "url": "https://yhuanhuan01.github.io/2023/08/09/bins/",
            "title": "bins",
            "date_published": "2023-08-09T02:57:17.000Z",
            "content_html": "<h1 id=\"pwn堆-bins学习\"><a class=\"markdownIt-Anchor\" href=\"#pwn堆-bins学习\">#</a> pwn 堆 bins 学习。</h1>\n<h2 id=\"一-bin链的介绍\"><a class=\"markdownIt-Anchor\" href=\"#一-bin链的介绍\">#</a> 一、bin 链的介绍</h2>\n<p>bin 是一个由 struct chunk 结构体组成的链表。<br>\n前面介绍过，不同的 chunk 根据特点不同分为不同的 chunk，为了将这些 chunk 进行分类的管理，glibc 采用了 bin 链这种方式管理不同的 chunk。<br>\n不同的 bin 链是由 arena 管理的。<br>\nbin 链中的 chunk 均为 free chunk。</p>\n<h2 id=\"二-bin链分类\"><a class=\"markdownIt-Anchor\" href=\"#二-bin链分类\">#</a> 二、bin 链分类</h2>\n<ul>\n<li>根据 bin 链成员的大小不同，分为以下几类：\n<ul>\n<li>fast bin 是单链表，其他都是双向链表。</li>\n<li><strong>Fast bin。</strong></li>\n<li><strong>Unsorted bin。</strong></li>\n<li><strong>Small bin。</strong></li>\n<li><strong>Large bin。</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三-bin链的保存struct-malloc_state结构体\"><a class=\"markdownIt-Anchor\" href=\"#三-bin链的保存struct-malloc_state结构体\">#</a> 三、bin 链的保存（struct malloc_state 结构体）</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>c</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">malloc_chunk</span><span class=\"token operator\">*</span> mchunkptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">malloc_chunk</span> <span class=\"token operator\">*</span>mfastbinptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">malloc_state</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">/*other member*/</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">/* Fastbins */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  mfastbinptr fastbinsY<span class=\"token punctuation\">[</span>NFASTBINS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">/* Normal bins packed as described above */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  mchunkptr bins<span class=\"token punctuation\">[</span>NBINS <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/*other member*/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>前面说过，不同的 bin 链是由 arena 管理的。因此一个线程中会有很多的 bin 链，这些 bin 链都有 arena 所表示的 struct malloc_state 结构体的以下成员保存：<br>\nfastbinY 数组：大小为 10。记录的是 fast bin 链。<br>\nbins 数组：大小为 129。记录的是 unsorted bin（1）、small bin（2~63）、large bin 链（64~126）。<br>\n<img data-src=\"/img/bins/4.jpg\" alt=\"img\"></p>\n</blockquote>\n<h2 id=\"四-fast-bin\"><a class=\"markdownIt-Anchor\" href=\"#四-fast-bin\">#</a> 四、Fast Bin</h2>\n<p>概念：chunk 的大小在 32 字节 ——128 字节（0x20——0x80）的 chunk 称为 “fast chunk”（大小不是 malloc 时的大小，而是在内存中 struct malloc_chunk 的大小，包含前 2 个成员）。<br>\nfast bin 链表的个数为 10 个。<br>\n不会对 free chunk 进行合并：鉴于设计 fast bin 的初衷就是进行快速的小内存分配和释放，因此系统将属于 fast bin 的 chunk 的 PREV_INUSE 位总是设置为 1，这样即使当 fast bin 中有某个 chunk 同一个 free chunk 相邻的时候，系统也不会进行自动合并操作，而是保留两者。虽然这样做可能会造成额外的碎片化问题，但瑕不掩瑜。</p>\n<blockquote>\n<p>fastbinsY 数组存储 fastbins 的规则</p>\n<ul>\n<li>\n<p>每个 fast bin 链表都是单链表（使用 fd 指针）。因此，fast bin 中无论是添加还是移除 fast chunk，都是对 “链表尾” 进行操作，而不会对某个中间的 fast chunk 进行操作。</p>\n</li>\n<li>\n<p>单个 fastbin 链表中的 chunk 大小都是相同的，各个 fastbin 链表中的 chunk 大小是不同的。</p>\n</li>\n<li>\n<p>fastbinY 数组中的每个 bin 链表的排序，是按照链表元素的大小进行排序的。数组的第一个元素的 fast bin 链表中的每个 chunk 的大小是 32 字节的，数组的第二个元素的 fast bin 链表中的每个 chunk 的大小是 48 字节的… 每个元素都比前面的 fast bin 链大 16 字节，以此类推进行排序。</p>\n<p><img data-src=\"/img/bins/1.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>链表索引宏定义：（fastbin_index）</p>\n<ul>\n<li>\n<p>** 功能：** 通过此宏能判断某一个 fastchunk 属于哪一个 fastbin 链表。</p>\n</li>\n<li>\n<p>** 参数：** 某一个 chunk 的大小。</p>\n<p><img data-src=\"/img/bins/20190730083911707.png\" alt=\"img\"></p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>malloc 操作与 fastbins 的初始化：<br>\n当应用层通过 malloc 函数第一次申请的 chunk 属于 16 字节～80 字节之间时，因为初始化的时候 fast bin 支持的最大内存大小以及所有 fast bin 链表都是空的，所以它也不会交由 fast bin 来处理，而是向下传递交由 small bin 来处理，如果 small bin 也为空的话就交给 unsorted bin 处理。</li>\n<li>那么，fast bin 如何进行初始化哪？<br>\n当我们第一次调用 malloc (fast bin) 的时候，系统执行_int_malloc 函数，该函数首先会发现当前 fast bin 为空，就转交给 small bin 处理，进而又发现 small bin 也为空，就调用 malloc_consolidate 函数对 malloc_state 结构体进行初始化。malloc_consolidate 函数主要完成以下几个功能：<br>\na  首先判断当前 malloc_state 结构体中的 fast bin 是否为空，如果为空就说明整个 malloc_state 都没有完成初始化，需要对 malloc_state 进行初始化。<br>\nb  malloc_state 的初始化操作由函数 malloc_init_state (av) 完成，该函数先初始化除 fast bin 之外的所有的 bins，再初始化 fast bins。<br>\n那么当再次执行 malloc (fast chunk) 函数的时候，此时 fast bin 相关数据不为空了，就可以使用 fast bin。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>free 操作<br>\n这个操作很简单，主要分为两步：先通过 chunksize 函数根据传入的地址指针获取该指针对应的 chunk 的大小；然后根据这个 chunk 大小获取该 chunk 所属的 fast bin，然后再将此 chunk 添加到该 fast bin 的链尾即可。整个操作都是在_int_free 函数中完成。</li>\n</ul>\n</blockquote>\n<h2 id=\"五-unsorted-bin\"><a class=\"markdownIt-Anchor\" href=\"#五-unsorted-bin\">#</a> 五、Unsorted Bin</h2>\n<p>何时使用：当释放较小或较大的 chunk 的时候，如果系统没有将它们添加到对应的 bins 中，系统就将这些 chunk 添加到 unsorted bin 中。<br>\n目的：这主要是为了让 “glibc malloc 机制” 能够有第二次机会重新利用最近释放的 chunk (第一次机会就是 fast bin 机制)。利用 unsorted bin，可以加快内存的分配和释放操作，因为整个操作都不再需要花费额外的时间去查找合适的 bin 了。<br>\nUnsorted bin 的特性如下：<br>\nunsorted bin 的个数： 1 个。<br>\nunsorted bin 是一个由 free chunks 组成的循环双链表。<br>\n在 unsorted bin 中，对 chunk 的大小并没有限制，任何大小的 chunk 都可以归属到 unsorted bin 中。<br>\nunsortedbin 采用的遍历顺序是 FIFO。</p>\n<h2 id=\"六-small-bin\"><a class=\"markdownIt-Anchor\" href=\"#六-small-bin\">#</a> 六、Small Bin</h2>\n<p>概念：小于 1024 字节（0x400）的 chunk 称之为 small chunk，small bin 就是用于管理 small chunk 的。<br>\nsmall bin 链表的个数为 62 个。<br>\n就内存的分配和释放速度而言，small bin 比 larger bin 快，但比 fast bin 慢。<br>\n合并操作：相邻的 free chunk 需要进行合并操作，即合并成一个大的 free chunk。具体操作见下文 free (small chunk) 介绍。</p>\n<blockquote>\n<ul>\n<li>\n<p>Small Bin 链表的特性</p>\n</li>\n<li>\n<p>每个 smallbin 也是一个由对应 free chunk 组成的循环双链表。</p>\n</li>\n<li>\n<p>small bin 采用 FIFO (先入先出) 算法：内存释放操作就将新释放的 chunk 添加到链表的 front end (前端)，分配操作就从链表的 rear end (尾端) 中获取 chunk。</p>\n</li>\n<li>\n<p>单个 smallbin 链表中的 chunk 大小都是相同的，各个 smallbin 链表中的 chunk 大小是不同的，跟 fastbinsY 数组存储 fastbin 链的原理是相同的。<br>\nbins 数组存储 small bin 链时：第一个 small bin 链中 chunk 的大小为 32 字节，后续每个 small bin 中 chunk 的大小依次增加两个机器字长（32 位相差 8 字节，64 位相差 16 字节）… 以此类推，跟 fastbinsY 数组存储 fastbin 链的原理是相同的（用下图表示）。</p>\n</li>\n<li>\n<p>bin 链存储的大小与数组下标的关系：chun_size=2<em>SIZE_SZ</em>index。</p>\n<p><img data-src=\"/img/bins/2.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>malloc 操作与 small bin 的初始化</p>\n<ul>\n<li>类似于 fast bins，最初所有的 small bin 都是空的，因此在对这些 small bin 完成初始化之前，即使用户请求的内存大小属于 small chunk 也不会交由 small bin 进行处理，而是交由 unsorted bin 处理。</li>\n<li>如果 unsorted bin 也不能处理的话，glibc malloc 就依次遍历后续的所有 bins，找出第一个满足要求的 bin，如果所有的 bin 都不满足的话，就转而使用 top chunk，如果 top chunk 大小不够，那么就扩充 top chunk，这样就一定能满足需求了。</li>\n<li>注意遍历后续 bins 以及之后的操作同样被 large bin 所使用，因此，将这部分内容放到 large bin 的 malloc 操作中加以介绍。</li>\n<li>那么 glibc malloc 是如何初始化这些 bins 的呢？因为这些 bin 属于 malloc_state 结构体，所以在初始化 malloc_state 的时候就会对这些 bin 进行初始化，代码如下：\n<ul>\n<li>将 bins 数组中的第一个成员索引值设置为了 1，而不是我们常用的 0 (在 bin_at 宏中，自动将 i 进行了减 1 处理)。</li>\n<li>从上面代码可以看出在初始化的时候 glibc malloc 将所有 bin 的指针都指向了自己 —— 这就代表这些 bin 都是空的。</li>\n</ul>\n</li>\n</ul>\n<p>​</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">malloc_init_state</span> <span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    mbinptr bin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">/* Establish circular links for normal bins */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NBINS<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    bin <span class=\"token operator\">=</span> <span class=\"token function\">bin_at</span> <span class=\"token punctuation\">(</span>av<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    bin<span class=\"token operator\">-></span>fd <span class=\"token operator\">=</span> bin<span class=\"token operator\">-></span>bk <span class=\"token operator\">=</span> bin<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>过后，当再次调用 malloc (small chunk) 的时候，如果该 chunk size 对应的 small bin 不为空，就从该 small bin 链表中取得 small chunk 给 malloc 使用。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>free 操作</p>\n<ul>\n<li>small 的 free 比较特殊。当释放 small chunk 的时候，先检查该 chunk 相邻的 chunk 是否为 free，如果是的话就进行合并操作：将这些 chunks 合并成新的 chunk，然后将它们从 small bin 中移除，最后将新的 chunk 添加到 unsorted bin 中，之后 unsorted bin 进行整理再添加到对应的 bin 链上（后面会有图介绍）。</li>\n</ul>\n</blockquote>\n<h2 id=\"七-large-bin\"><a class=\"markdownIt-Anchor\" href=\"#七-large-bin\">#</a> 七、Large Bin</h2>\n<ul>\n<li>\n<p>概念：大于等于 1024 字节（0x400）的 chunk 称之为 large chunk，large bin 就是用于管理这些 largechunk 的。</p>\n</li>\n<li>\n<p>large bin 链表的个数为 63 个，被分为 6 组。</p>\n</li>\n<li>\n<p>largechunk 使用 fd_nextsize、bk_nextsize 连接起来的。</p>\n</li>\n<li>\n<p>合并操作：类似于 small bin。</p>\n</li>\n</ul>\n<blockquote>\n<p>Large Bin 链表的特性</p>\n<ul>\n<li>同一个 largebin 中每个 chunk 的大小可以不一样，这些 chunk 根据一定的范围存储在一个 larbin 链表中。</li>\n<li>large chunk 可以添加、删除在 large bin 的任何一个位置。</li>\n<li>在这 63 个 largebins 中：第一组的 32 个 largebin 链依次以 64 字节步长为间隔，即第一个 largebin 链中 chunksize 为 1024-1087 字节，第二个 large bin 中 chunk size 为 1088~1151 字节。第二组的 16 个 largebin 链依次以 512 字节步长为间隔；第三组的 8 个 largebin 链以步长 4096 为间隔；第四组的 4 个 largebin 链以 32768 字节为间隔；第五组的 2 个 largebin 链以 262144 字节为间隔；最后一组的 largebin 链中的 chunk 大小无限制。</li>\n</ul>\n<p><img data-src=\"/img/bins/3.jpg\" alt=\"img\"></p>\n<ul>\n<li>在同一个 largebin 中：每个 chunk 的大小不一定相同，因此为了加快内存分配和释放的速度，就将同一个 largebin 中的所有 chunk 按照 chunksize 进行从大到小的排列：最大的 chunk 放在一个链表的 front end，最小的 chunk 放在 rear end；相同大小的 chunk 按照最近使用顺序排序。</li>\n</ul>\n</blockquote>\n<blockquote>\n<h3 id=\"链表索引宏定义largebin_index\"><a class=\"markdownIt-Anchor\" href=\"#链表索引宏定义largebin_index\">#</a> 链表索引宏定义：（largebin_index）</h3>\n<ul>\n<li>\n<p>参数为链表能存储的 chunk 大小，宏定义中有简介调用其他宏定义。</p>\n</li>\n<li>\n<p>例如：第一个 largebin 的起始大小为 1024，那么 1024&gt;&gt;6=16，所以其在 bins 数组中的下标为 48+16=64。</p>\n<p><img data-src=\"/img/bins/5.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>malloc 操作与 large bin 的初始化</p>\n<ul>\n<li>初始化完成之前的操作类似于 small bin。</li>\n<li>下面讨论 large bins 初始化完成之后的操作：\n<ul>\n<li>首先确定用户请求的大小属于哪一个 large bin，然后判断该 large bin 中最大的 chunk 的 size 是否大于用户请求的 size (只需要对比链表中 front end 的 size 即可)。如果大于，就从 rear end 开始遍历该 large bin，找到第一个 size 相等或接近的 chunk，分配给用户。如果该 chunk 大于用户请求的 size 的话，就将该 chunk 拆分为两个 chunk：前者返回给用户，且 size 等同于用户请求的 size；剩余的部分做为一个新的 chunk 添加到 unsorted bin 中。</li>\n<li>如果该 large bin 中最大的 chunk 的 size 小于用户请求的 size 的话，那么就依次查看后续的 large bin 中是否有满足需求的 chunk，不过需要注意的是鉴于 bin 的个数较多 (不同 bin 中的 chunk 极有可能在不同的内存页中)，如果按照上一段中介绍的方法进行遍历的话 (即遍历每个 bin 中的 chunk)，就可能会发生多次内存页中断操作，进而严重影响检索速度，所以 glibc malloc 设计了 Binmap 结构体来帮助提高 bin-by-bin 检索的速度。Binmap 记录了各个 bin 中是否为空，通过 bitmap 可以避免检索一些空的 bin。如果通过 binmap 找到了下一个非空的 large bin 的话，就按照上一段中的方法分配 chunk，否则就使用 top chunk 来分配合适的内存。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<h3 id=\"free操作\"><a class=\"markdownIt-Anchor\" href=\"#free操作\">#</a> free 操作</h3>\n<ul>\n<li>\n<p>类似于 small chunk。</p>\n<p><img data-src=\"/img/bins/6.jpg\" alt=\"img\"></p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"八-tcache\"><a class=\"markdownIt-Anchor\" href=\"#八-tcache\">#</a> 八、tcache</h2>\n<p>cache 是 glibc 2.26 (ubuntu 17.10) 之后引入的一种技术（see <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9naXQvP3A9Z2xpYmMuZ2l0O2E9Y29tbWl0ZGlmZjtoPWQ1YzNmYWZjNDMwN2M5YjdhNGM3ZDVjYjM4MWZjZGJmYWQzNDBiY2M=\">commit</span>），目的是提升堆管理的性能。但提升性能的同时舍弃了很多安全检查，也因此有了很多新的利用方式。</p>\n<blockquote>\n<p>主要参考了 glibc 源码，angelboy 的 slide 以及 tukan.farm，链接都放在最后了。</p>\n</blockquote>\n<p>相关结构体 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI18x\">¶</span></p>\n<p>tcache 引入了两个新的结构体， <code>tcache_entry</code>  和  <code>tcache_perthread_struct</code> 。</p>\n<p>这其实和 fastbin 很像，但又不一样。</p>\n<p>tcache_entry<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI3RjYWNoZV9lbnRyeQ==\">¶</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjdGNhY2hlX2VudHJ5\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* We overlay this structure on the user-data portion of a chunk when</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   the chunk is stored in the per-thread cache.  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tcache_entry</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tcache_entry</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> tcache_entry<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>tcache_entry</code>  用于链接空闲的 chunk 结构体，其中的  <code>next</code>  指针指向下一个大小相同的 chunk。</p>\n<p>需要注意的是这里的 next 指向 chunk 的 user data，而 fastbin 的 fd 指向 chunk 开头的地址。</p>\n<p>而且，tcache_entry 会复用空闲 chunk 的 user data 部分。</p>\n<p>tcache_perthread_struct<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI3RjYWNoZV9wZXJ0aHJlYWRfc3RydWN0\">¶</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjdGNhY2hlX3BlcnRocmVhZF9zdHJ1Y3Q=\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* There is one of these for each thread, which contains the</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   per-thread cache (hence \"tcache_perthread_struct\").  Keeping</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   overall size low is mildly important.  Note that COUNTS and ENTRIES</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   are redundant (we could have just counted the linked list each</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   time), this is for performance reasons.  */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tcache_perthread_struct</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">char</span> counts<span class=\"token punctuation\">[</span>TCACHE_MAX_BINS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  tcache_entry <span class=\"token operator\">*</span>entries<span class=\"token punctuation\">[</span>TCACHE_MAX_BINS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> tcache_perthread_struct<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span> <span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">TCACHE_MAX_BINS</span>                <span class=\"token expression\"><span class=\"token number\">64</span></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">static</span> __thread tcache_perthread_struct <span class=\"token operator\">*</span>tcache <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>每个 thread 都会维护一个  <code>tcache_perthread_struct</code> ，它是整个 tcache 的管理结构，一共有  <code>TCACHE_MAX_BINS</code>  个计数器和  <code>TCACHE_MAX_BINS</code>  项 tcache_entry，其中</p>\n<ul>\n<li><code>tcache_entry</code>  用单向链表的方式链接了相同大小的处于空闲状态（free 后）的 chunk，这一点上和 fastbin 很像。</li>\n<li><code>counts</code>  记录了  <code>tcache_entry</code>  链上空闲 chunk 的数目，每条链上最多可以有 7 个 chunk。</li>\n</ul>\n<p>用图表示大概是：</p>\n<p>基本工作方式 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI18y\">¶</span></p>\n<ul>\n<li>第一次 malloc 时，会先 malloc 一块内存用来存放  <code>tcache_perthread_struct</code>  。</li>\n<li>free 内存，且 size 小于 small bin size 时</li>\n<li>tcache 之前会放到 fastbin 或者 unsorted bin 中</li>\n<li>tcache 后：\n<ul>\n<li>先放到对应的 tcache 中，直到 tcache 被填满（默认是 7 个）</li>\n<li>tcache 被填满之后，再次 free 的内存和之前一样被放到 fastbin 或者 unsorted bin 中</li>\n<li>tcache 中的 chunk 不会合并（不取消 inuse bit）</li>\n</ul>\n</li>\n<li>malloc 内存，且 size 在 tcache 范围内</li>\n<li>先从 tcache 取 chunk，直到 tcache 为空</li>\n<li>tcache 为空后，从 bin 中找</li>\n<li>tcache 为空时，如果  <code>fastbin/smallbin/unsorted bin</code>  中有 size 符合的 chunk，会先把  <code>fastbin/smallbin/unsorted bin</code>  中的 chunk 放到 tcache 中，直到填满。之后再从 tcache 中取；因此 chunk 在 bin 中和 tcache 中的顺序会反过来</li>\n</ul>\n<p>源码分析 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI18z\">¶</span></p>\n<p>接下来从源码的角度分析一下 tcache。</p>\n<p>libc_malloc<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI19fbGliY19tYWxsb2M=\">¶</span></p>\n<p>第一次 malloc 时，会进入到  <code>MAYBE_INIT_TCACHE ()</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjMzAxMA==\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">__libc_malloc</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> bytes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">USE_TCACHE</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">/* int_free also calls request2size, be careful to not pad twice.  */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token class-name\">size_t</span> tbytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 根据 malloc 传入的参数计算 chunk 实际大小，并计算 tcache 对应的下标</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">checked_request2size</span> <span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span> tbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token class-name\">size_t</span> tc_idx <span class=\"token operator\">=</span> <span class=\"token function\">csize2tidx</span> <span class=\"token punctuation\">(</span>tbytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 初始化 tcache</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">MAYBE_INIT_TCACHE</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  DIAG_PUSH_NEEDS_COMMENT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tc_idx <span class=\"token operator\">&lt;</span> mp_<span class=\"token punctuation\">.</span>tcache_bins  <span class=\"token comment\">// 根据 size 得到的 idx 在合法的范围内</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class=\"token comment\">/* to appease gcc */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token operator\">&amp;&amp;</span> tcache</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token operator\">&amp;&amp;</span> tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//tcache->entries [tc_idx] 有 chunk</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">tcache_get</span> <span class=\"token punctuation\">(</span>tc_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  DIAG_POP_NEEDS_COMMENT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>tcache_init()<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI19fdGNhY2hlX2luaXQ=\">¶</span></p>\n<p>其中  <code>MAYBE_INIT_TCACHE ()</code>  在 tcache 为空（即第一次 malloc）时调用了  <code>tcache_init()</code> ，直接查看  <code>tcache_init()</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjdGNhY2hlX2luaXQ=\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tcache_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  mstate ar_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>victim <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token class-name\">size_t</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>tcache_perthread_struct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tcache_shutting_down<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">arena_get</span> <span class=\"token punctuation\">(</span>ar_ptr<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 找到可用的 arena</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  victim <span class=\"token operator\">=</span> <span class=\"token function\">_int_malloc</span> <span class=\"token punctuation\">(</span>ar_ptr<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请一个 sizeof (tcache_perthread_struct) 大小的 chunk</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>victim <span class=\"token operator\">&amp;&amp;</span> ar_ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      ar_ptr <span class=\"token operator\">=</span> <span class=\"token function\">arena_get_retry</span> <span class=\"token punctuation\">(</span>ar_ptr<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      victim <span class=\"token operator\">=</span> <span class=\"token function\">_int_malloc</span> <span class=\"token punctuation\">(</span>ar_ptr<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ar_ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">__libc_lock_unlock</span> <span class=\"token punctuation\">(</span>ar_ptr<span class=\"token operator\">-></span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">/* In a low memory situation, we may not be able to allocate memory</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     - in which case, we just keep trying later.  However, we</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     typically do this very early, so either there is sufficient</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     memory, or there isn't enough memory to do non-trivial</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     allocations anyway.  */</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 初始化 tcache</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      tcache <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tcache_perthread_struct <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token function\">memset</span> <span class=\"token punctuation\">(</span>tcache<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span> <span class=\"token punctuation\">(</span>tcache_perthread_struct<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>tcache_init()</code>  成功返回后， <code>tcache_perthread_struct</code>  就被成功建立了。</p>\n<p>申请内存 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI180\">¶</span></p>\n<p>接下来将进入申请内存的步骤</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 从 tcache list 中获取内存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tc_idx <span class=\"token operator\">&lt;</span> mp_<span class=\"token punctuation\">.</span>tcache_bins <span class=\"token comment\">// 由 size 计算的 idx 在合法范围内</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">/*&amp;&amp; tc_idx &lt; TCACHE_MAX_BINS*/</span> <span class=\"token comment\">/* to appease gcc */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">&amp;&amp;</span> tcache</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">&amp;&amp;</span> tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 该条 tcache 链不为空</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token function\">tcache_get</span> <span class=\"token punctuation\">(</span>tc_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  DIAG_POP_NEEDS_COMMENT<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 进入与无 tcache 时类似的流程</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>SINGLE_THREAD_P<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      victim <span class=\"token operator\">=</span> <span class=\"token function\">_int_malloc</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>main_arena<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>victim <span class=\"token operator\">||</span> <span class=\"token function\">chunk_is_mmapped</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mem2chunk</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token operator\">&amp;</span>main_arena <span class=\"token operator\">==</span> <span class=\"token function\">arena_for_chunk</span> <span class=\"token punctuation\">(</span><span class=\"token function\">mem2chunk</span> <span class=\"token punctuation\">(</span>victim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span> victim<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>tcache-&gt;entries</code>  不为空时，将进入  <code>tcache_get()</code>  的流程获取 chunk，否则与 tcache 机制前的流程类似，这里主要分析第一种  <code>tcache_get()</code> 。这里也可以看出 tcache 的优先级很高，比 fastbin 还要高（ fastbin 的申请在没进入 tcache 的流程中）。</p>\n<p>tcache_get()<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI3RjYWNoZV9nZXQ=\">¶</span></p>\n<p>看一下  <code>tcache_get()</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjdGNhY2hlX2dldA==\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Caller must ensure that we know tc_idx is valid and there's</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   available chunks to remove.  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> __always_inline <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tcache_get</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> tc_idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  tcache_entry <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>tc_idx <span class=\"token operator\">&lt;</span> TCACHE_MAX_BINS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">--</span><span class=\"token punctuation\">(</span>tcache<span class=\"token operator\">-></span>counts<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得一个 chunk，counts 减一</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>tcache_get()</code>  就是获得 chunk 的过程了。可以看出这个过程还是很简单的，从  <code>tcache-&gt;entries[tc_idx]</code>  中获得第一个 chunk， <code>tcache-&gt;counts</code>  减一，几乎没有任何保护。</p>\n<p>libc_free()<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI19fbGliY19mcmVl\">¶</span></p>\n<p>看完申请，再看看有 tcache 时的释放</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjMzA2OA==\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">__libc_free</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>mem<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">MAYBE_INIT_TCACHE</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  ar_ptr <span class=\"token operator\">=</span> <span class=\"token function\">arena_for_chunk</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">_int_free</span> <span class=\"token punctuation\">(</span>ar_ptr<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>__libc_free()</code>  没有太多变化， <code>MAYBE_INIT_TCACHE ()</code>  在 tcache 不为空失去了作用。</p>\n<p>int_free()<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI19pbnRfZnJlZQ==\">¶</span></p>\n<p>跟进  <code>_int_free()</code></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjNDEyMw==\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">_int_free</span> <span class=\"token punctuation\">(</span>mstate av<span class=\"token punctuation\">,</span> mchunkptr p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> have_lock<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\">USE_TCACHE</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">size_t</span> tc_idx <span class=\"token operator\">=</span> <span class=\"token function\">csize2tidx</span> <span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tcache</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&amp;&amp;</span> tc_idx <span class=\"token operator\">&lt;</span> mp_<span class=\"token punctuation\">.</span>tcache_bins <span class=\"token comment\">// 64</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&amp;&amp;</span> tcache<span class=\"token operator\">-></span>counts<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> mp_<span class=\"token punctuation\">.</span>tcache_count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 7</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">tcache_put</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> tc_idx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>判断  <code>tc_idx</code>  合法， <code>tcache-&gt;counts[tc_idx]</code>  在 7 个以内时，就进入  <code>tcache_put()</code> ，传递的两个参数是要释放的 chunk 和该 chunk 对应的 size 在 tcache 中的下标。</p>\n<p>tcache_put()<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUvI3RjYWNoZV9wdXQ=\">¶</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLndvYm9xLm9yZy91c2Vyc3BhY2UvZ2xpYmMvbWFsbG9jL21hbGxvYy5jLmh0bWwjMjkwNw==\">source code</span></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Caller must ensure that we know tc_idx is valid and there's room</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   for more chunks.  */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> __always_inline <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tcache_put</span> <span class=\"token punctuation\">(</span>mchunkptr chunk<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> tc_idx<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  tcache_entry <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tcache_entry <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">chunk2mem</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">assert</span> <span class=\"token punctuation\">(</span>tc_idx <span class=\"token operator\">&lt;</span> TCACHE_MAX_BINS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  e<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  tcache<span class=\"token operator\">-></span>entries<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">++</span><span class=\"token punctuation\">(</span>tcache<span class=\"token operator\">-></span>counts<span class=\"token punctuation\">[</span>tc_idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>tcache_puts()</code>  完成了把释放的 chunk 插入到  <code>tcache-&gt;entries[tc_idx]</code>  链表头部的操作，也几乎没有任何保护。并且 <strong>没有把 p 位置零</strong>。</p>\n<blockquote>\n<p>版权声明：本文为 CSDN 博主「董哥的黑板报」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>\n原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDUzMjg1L2FydGljbGUvZGV0YWlscy85Njg2NTMyMQ==\">https://blog.csdn.net/qq_41453285/article/details/96865321</span></p>\n<p>ctf-wiki:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jdGYtd2lraS5vcmcvcHduL2xpbnV4L3VzZXItbW9kZS9oZWFwL3B0bWFsbG9jMi9pbXBsZW1lbnRhdGlvbi90Y2FjaGUv\">tcache - CTF Wiki (ctf-wiki.org)</span></p>\n</blockquote>\n",
            "tags": [
                "堆"
            ]
        }
    ]
}